export const textBoxes = [
  {
    x: 102.08706666666666,
    y: 195.82877333333332,
    width: 631.1272799999999,
    height: 173.712,
    text: 'How to Use AI for \nData Analysis \n',
  },
  {
    x: 72.0,
    y: 1183.3170666666665,
    width: 243.66933333333333,
    height: 42.666666666666664,
    text: 'Introduction\n',
  },
  {
    x: 74.88,
    y: 1250.7933333333333,
    width: 606.3889333333333,
    height: 78.68666666666664,
    text: 'Data analysis is a powerful tool used to gain valuable insights from large sets of data. \nBy organizing and looking closely at our data, we are able to detect patterns and make \ninformed decisions. There are countless instances where data analysis can be a highly \ninstrumental tool, such as:\n',
  },
  {
    x: 133.27999999999997,
    y: 1371.1933333333332,
    width: 184.03733333333335,
    height: 14.666666666666666,
    text: 'Informed decision-making\n',
  },
  {
    x: 420.0,
    y: 1371.5933333333335,
    width: 107.91733333333332,
    height: 14.666666666666666,
    text: 'Risk mitigation \n',
  },
  {
    x: 133.27999999999997,
    y: 1401.8613333333335,
    width: 228.6944,
    height: 14.666666666666666,
    text: 'Recognizing patterns and trends \n',
  },
  {
    x: 420.0,
    y: 1402.2613333333331,
    width: 165.5852,
    height: 14.666666666666666,
    text: 'Performance evaluation\n',
  },
  {
    x: 133.27999999999997,
    y: 1432.5293333333332,
    width: 143.1745333333333,
    height: 14.66666666666659,
    text: 'Improving efficiency\n',
  },
  {
    x: 420.0,
    y: 1432.9293333333335,
    width: 176.11586666666668,
    height: 14.66666666666659,
    text: 'Forecasting and planning\n',
  },
  {
    x: 74.88,
    y: 1512.8866666666665,
    width: 612.961066666667,
    height: 100.02666666666664,
    text: 'In recent years, the development of artificial intelligence (AI) has begun to impact data \nanalysis in a notable way. We\u2019ve seen AI enable machines to learn from data, recognize \npatterns, and make predictions\u2014all with minimal human intervention. By harnessing the \ncapabilities of AI, organizations are able to effectively analyze large amounts of data at \nboth a speed and scale that would be impossible for humans to achieve alone. \n',
  },
  {
    x: 74.88,
    y: 1640.9119999999998,
    width: 617.1528000000003,
    height: 57.34666666666665,
    text: 'Whether it\u2019s improving customer satisfaction, streamlining operations, or identifying new \nmarket opportunities, AI is absolutely revolutionizing the way organizations are able to \nleverage their data. \n',
  },
  {
    x: 74.88,
    y: 1726.2573333333332,
    width: 505.83426666666685,
    height: 14.666666666666666,
    text: 'Here are just a few of the ways AI can be used to help with data science: \n',
  },
  {
    x: 76.00666666666666,
    y: 1770.552,
    width: 219.1170666666667,
    height: 14.666666666666666,
    text: '\u2022  Provide and explore insights\n',
  },
  {
    x: 384.00666666666666,
    y: 1767.1346666666668,
    width: 145.50799999999995,
    height: 14.666666666666629,
    text: '\u2022  Forecast demand\n',
  },
  {
    x: 76.00666666666666,
    y: 1798.5506666666665,
    width: 287.6998666666666,
    height: 14.666666666666666,
    text: '\u2022  Create datasets for training purposes \n',
  },
  {
    x: 384.00666666666666,
    y: 1795.1333333333332,
    width: 200.44933333333324,
    height: 14.666666666666666,
    text: '\u2022  Make informed decisions \n',
  },
  {
    x: 76.00666666666666,
    y: 1826.5493333333334,
    width: 245.04773333333327,
    height: 14.666666666666666,
    text: '\u2022  Create dashboards and reports \n',
  },
  {
    x: 384.00666666666666,
    y: 1823.1319999999998,
    width: 9.195999999999987,
    height: 14.666666666666666,
    text: '\u2022 \n',
  },
  {
    x: 408.00133333333326,
    y: 1823.1319999999998,
    width: 239.94373333333328,
    height: 14.666666666666666,
    text: 'Improve production and efficiency\n',
  },
  {
    x: 76.00666666666666,
    y: 1854.548,
    width: 198.0132,
    height: 14.666666666666666,
    text: '\u2022  Predict market outcomes\n',
  },
  {
    x: 76.00666666666666,
    y: 1882.5466666666664,
    width: 204.83319999999998,
    height: 14.666666666666666,
    text: '\u2022  Understand markets and  \n',
  },
  {
    x: 100.00133333333332,
    y: 1903.8866666666665,
    width: 140.60786666666667,
    height: 14.666666666666666,
    text: 'customer behaviors \n',
  },
  {
    x: 384.00666666666666,
    y: 1851.1306666666665,
    width: 234.17973333333322,
    height: 14.666666666666666,
    text: '\u2022  Monitor business performance\n',
  },
  {
    x: 744.0,
    y: 2073.1866666666665,
    width: 7.306666666666691,
    height: 13.333333333333332,
    text: '2\n',
  },
  {
    x: 172.90800000000002,
    y: 2388.496933333333,
    width: 470.16000000000014,
    height: 60.0,
    text: 'Table of Contents\n',
  },
  {
    x: 179.28,
    y: 2520.793333333333,
    width: 73.62,
    height: 60.0,
    text: '04\n',
  },
  {
    x: 281.77626666666663,
    y: 2520.953333333333,
    width: 302.1452,
    height: 68.01200000000001,
    text: 'How to Implement AI \ninto Data Analysis\n',
  },
  {
    x: 179.28,
    y: 2657.293333333333,
    width: 66.41999999999999,
    height: 60.0,
    text: '10\n',
  },
  {
    x: 281.77626666666663,
    y: 2657.453333333333,
    width: 335.9132,
    height: 108.02400000000003,
    text: 'Benefits and Challenges \nof Incorporating AI in \nData Analysis\n',
  },
  {
    x: 179.28,
    y: 2832.7933333333335,
    width: 61.74000000000001,
    height: 60.000000000000036,
    text: '13\n',
  },
  {
    x: 281.77626666666663,
    y: 2847.237333333333,
    width: 357.52919999999983,
    height: 28.0,
    text: 'AI Tools for Data Analysis \n',
  },
  {
    x: 744.0,
    y: 3133.1866666666665,
    width: 7.053333333333285,
    height: 13.333333333333332,
    text: '3\n',
  },
  {
    x: 72.0,
    y: 3303.3170666666665,
    width: 417.28000000000003,
    height: 93.86666666666663,
    text: 'How to Implement AI \ninto Data Analysis\n',
  },
  {
    x: 74.88,
    y: 3429.3533333333335,
    width: 399.6930666666667,
    height: 57.34666666666665,
    text: 'The strategic introduction of AI technology can allow for \na powerful improvement in how you\u2019re extracting insights \nand leveraging data to make sound business decisions. \n',
  },
  {
    x: 74.88,
    y: 3514.698666666667,
    width: 383.22093333333333,
    height: 36.00666666666666,
    text: 'There are 5 steps to successfully implementing AI tools \ninto your data analysis process: \n',
  },
  {
    x: 84.154,
    y: 3596.9496,
    width: 11.622239999999994,
    height: 10.080000000000002,
    text: '01\n',
  },
  {
    x: 116.54666666666665,
    y: 3595.06,
    width: 153.7785333333333,
    height: 14.666666666666666,
    text: 'Define your objectives\n',
  },
  {
    x: 329.60773333333333,
    y: 3596.482933333333,
    width: 11.914560000000012,
    height: 10.080000000000002,
    text: '03\n',
  },
  {
    x: 362.14,
    y: 3594.590666666667,
    width: 151.7692,
    height: 14.666666666666666,
    text: 'Choose the right tools\n',
  },
  {
    x: 586.9117333333334,
    y: 3596.482933333333,
    width: 12.186719999999998,
    height: 10.080000000000002,
    text: '05\n',
  },
  {
    x: 623.0306666666667,
    y: 3595.016,
    width: 119.38520000000001,
    height: 14.666666666666666,
    text: 'Learn and iterate\n',
  },
  {
    x: 84.02293333333333,
    y: 3646.0296,
    width: 11.884320000000002,
    height: 10.080000000000002,
    text: '02\n',
  },
  {
    x: 119.99333333333334,
    y: 3640.5559999999996,
    width: 140.9892,
    height: 36.00666666666666,
    text: 'Gather and prepare \nyour data\n',
  },
  {
    x: 329.1844,
    y: 3652.7495999999996,
    width: 12.76127999999998,
    height: 10.080000000000002,
    text: '04\n',
  },
  {
    x: 362.14,
    y: 3648.1973333333335,
    width: 191.9558666666666,
    height: 14.666666666666666,
    text: 'Start small and experiment \n',
  },
  {
    x: 744.0,
    y: 4193.1866666666665,
    width: 8.266666666666726,
    height: 13.333333333333332,
    text: '4\n',
  },
  {
    x: 421.43866666666673,
    y: 4367.489333333333,
    width: 213.1932,
    height: 14.666666666666666,
    text: 'LET\u2019S DIVE INTO EACH STEP.\n',
  },
  {
    x: 421.43999999999994,
    y: 4403.453333333333,
    width: 226.01226666666662,
    height: 18.666666666666664,
    text: '1. Define your objectives\n',
  },
  {
    x: 421.43866666666673,
    y: 4438.476,
    width: 318.3224,
    height: 121.36666666666663,
    text: 'Having a clear sense of direction, and areas \nof focus, is a crucial first step in any change \nof process. Before implementing any AI \ntools, you should clearly outline the goals and \nobjectives you want to achieve through AI-\nsupported data analysis. \n',
  },
  {
    x: 74.88,
    y: 4603.593333333333,
    width: 442.8262666666666,
    height: 14.66666666666659,
    text: 'To do this successfully, consider asking yourself these questions:\n',
  },
  {
    x: 72.0,
    y: 4641.993333333333,
    width: 288.6663999999999,
    height: 14.666666666666666,
    text: '\u2022  What specific business challenges do  \n',
  },
  {
    x: 419.996,
    y: 4642.037333333334,
    width: 278.28239999999994,
    height: 14.666666666666666,
    text: '\u2022  How will the insights gained from AI \n',
  },
  {
    x: 95.99466666666666,
    y: 4663.333333333333,
    width: 129.95986666666667,
    height: 14.666666666666666,
    text: 'I hope to address?\n',
  },
  {
    x: 72.0,
    y: 4695.335999999999,
    width: 298.63973333333325,
    height: 14.666666666666666,
    text: '\u2022  What are the short-term and long-term \n',
  },
  {
    x: 443.99066666666664,
    y: 4663.377333333333,
    width: 276.2129333333333,
    height: 36.00666666666666,
    text: 'analysis be used to drive initiatives and \noverall growth? \n',
  },
  {
    x: 95.99466666666666,
    y: 4716.6759999999995,
    width: 161.4638666666667,
    height: 14.666666666666666,
    text: 'goals I aim to achieve?\n',
  },
  {
    x: 419.996,
    y: 4716.719999999999,
    width: 241.07306666666665,
    height: 14.666666666666666,
    text: '\u2022  What resources, expertise, and \n',
  },
  {
    x: 72.0,
    y: 4748.678666666667,
    width: 289.0609333333333,
    height: 36.00666666666666,
    text: '\u2022  What key metrics or KPIs will indicate \nthe success of the AI implementation?\n',
  },
  {
    x: 72.0,
    y: 4802.021333333333,
    width: 250.21039999999996,
    height: 14.666666666666666,
    text: '\u2022  How will AI-driven data analysis \n',
  },
  {
    x: 95.99466666666666,
    y: 4823.361333333333,
    width: 254.03839999999997,
    height: 36.00666666666666,
    text: 'enhance decision-making processes \nwithin my organization?\n',
  },
  {
    x: 443.99066666666664,
    y: 4738.0599999999995,
    width: 288.0064,
    height: 36.00666666666666,
    text: 'infrastructure are needed to support the \nimplementation of these AI technologies?\n',
  },
  {
    x: 419.996,
    y: 4791.402666666667,
    width: 307.2916000000001,
    height: 57.34666666666665,
    text: '\u2022  How will the outcomes of AI-driven data \nanalysis align with the overall goals and \nvision of my organization?\n',
  },
  {
    x: 72.0,
    y: 4912.736,
    width: 298.9802666666667,
    height: 18.666666666666664,
    text: '2. Gather and prepare your data\n',
  },
  {
    x: 72.00533333333343,
    y: 4947.790666666666,
    width: 673.4596000000001,
    height: 57.34666666666665,
    text: 'Adequately preparing your data is important to set AI algorithms up for success. Ensure that \nyour data sources are clean, organized, and in suitable shape for analysis. This means you\u2019ll want \nto remove any errors, inconsistencies, duplicates, and missing values from your data set. \n',
  },
  {
    x: 72.00533333333343,
    y: 5033.1359999999995,
    width: 653.1315999999999,
    height: 36.00666666666666,
    text: 'In terms of what kinds of data can be analyzed, AI can be used on a wide variety of datasets, \nincluding but not limited to:\n',
  },
  {
    x: 106.70706666666666,
    y: 5099.219999999999,
    width: 569.2235999999998,
    height: 14.666666666666666,
    text: 'Structured Datasets: These are datasets with a defined format, like databases or \n',
  },
  {
    x: 106.70706666666666,
    y: 5124.549333333333,
    width: 572.4942666666668,
    height: 14.666666666666647,
    text: 'spreadsheets. AI can be used to uncover patterns, make predictions, and optimize \n',
  },
  {
    x: 106.70706666666666,
    y: 5149.8786666666665,
    width: 228.6782666666667,
    height: 14.666666666666666,
    text: 'processes within structured data.\n',
  },
  {
    x: 744.0,
    y: 5253.1866666666665,
    width: 7.573333333333267,
    height: 13.333333333333332,
    text: '5\n',
  },
  {
    x: 106.70706666666666,
    y: 5433.46,
    width: 623.8892000000001,
    height: 14.666666666666666,
    text: 'Unstructured Datasets: Text data, images, videos, and audio files fall under unstructured \n',
  },
  {
    x: 106.70706666666666,
    y: 5458.789333333333,
    width: 621.8916000000004,
    height: 14.666666666666666,
    text: 'datasets. AI tools like natural language processing and computer vision can be utilized to \n',
  },
  {
    x: 106.70706666666666,
    y: 5484.118666666666,
    width: 362.99413333333325,
    height: 14.666666666666666,
    text: 'analyze and extract insights from unstructured data.\n',
  },
  {
    x: 106.70706666666666,
    y: 5524.627999999999,
    width: 633.5354666666668,
    height: 14.666666666666666,
    text: 'Time-Series Data: This type of dataset records data points over time, such as stock prices, \n',
  },
  {
    x: 106.70706666666666,
    y: 5549.957333333333,
    width: 608.4716000000001,
    height: 14.666666666666666,
    text: 'weather data, or IoT sensor readings. AI algorithms can be employed to forecast future \n',
  },
  {
    x: 106.70706666666666,
    y: 5575.286666666667,
    width: 601.2702666666665,
    height: 14.666666666666666,
    text: 'trends, detect anomalies, and optimize operations based on historical patterns in time-\n',
  },
  {
    x: 106.70706666666666,
    y: 5600.615999999999,
    width: 79.9172,
    height: 14.666666666666666,
    text: 'series data.\n',
  },
  {
    x: 106.70706666666666,
    y: 5640.611999999999,
    width: 589.8757333333335,
    height: 14.666666666666666,
    text: 'Big Data: Large volumes of data, known as big data, can benefit from AI techniques \n',
  },
  {
    x: 106.70706666666666,
    y: 5665.941333333333,
    width: 605.0088000000001,
    height: 14.666666666666666,
    text: 'to process, analyze, and generate valuable insights from massive datasets that are too \n',
  },
  {
    x: 106.70706666666666,
    y: 5691.270666666665,
    width: 322.07706666666655,
    height: 14.666666666666666,
    text: 'complex for traditional data analysis methods.\n',
  },
  {
    x: 72.00573333333332,
    y: 5733.144,
    width: 658.2062666666666,
    height: 36.00666666666666,
    text: 'Remember to work with your organization\u2019s legal team to determine parameters for what data \ncan and cannot be input into AI tools. \n',
  },
  {
    x: 72.0,
    y: 5815.773333333333,
    width: 255.86026666666663,
    height: 18.666666666666664,
    text: '3. Choose the right AI tools \n',
  },
  {
    x: 72.00573333333332,
    y: 5850.755999999999,
    width: 339.9836,
    height: 100.02666666666664,
    text: 'Select AI tools and technologies that align with \nyour objectives and data requirements. Consider \nfactors such as the complexity of the data, the \nexpertise of your team, and the scalability of the \ntools.\n',
  },
  {
    x: 72.00573333333332,
    y: 5978.781333333332,
    width: 345.71973333333324,
    height: 78.68666666666664,
    text: 'We\u2019ll provide more in-depth coverage on AI tools \nthat can be used for data analysis later, but for \nnow, here are a few categories of AI technologies \nthat apply: \n',
  },
  {
    x: 106.70706666666666,
    y: 6091.582666666666,
    width: 635.9290666666667,
    height: 14.666666666666666,
    text: 'Machine Learning: Machine learning algorithms are used to analyze data, identify patterns \n',
  },
  {
    x: 106.70706666666666,
    y: 6116.912,
    width: 586.4114666666669,
    height: 14.666666666666666,
    text: 'and make predictions without being explicitly programmed. This includes supervised \n',
  },
  {
    x: 106.70706666666666,
    y: 6142.2413333333325,
    width: 413.9476000000002,
    height: 14.666666666666666,
    text: 'learning, unsupervised learning, and reinforcement learning.\n',
  },
  {
    x: 106.70706666666666,
    y: 6184.642666666667,
    width: 614.1652,
    height: 14.666666666666647,
    text: 'Natural Language Processing (NLP): NLP technology enables machines to understand, \n',
  },
  {
    x: 106.70706666666666,
    y: 6209.972,
    width: 617.4212000000002,
    height: 14.666666666666666,
    text: 'interpret, and generate human language. This is useful for analyzing text data, sentiment \n',
  },
  {
    x: 106.70706666666666,
    y: 6235.301333333333,
    width: 240.3250666666666,
    height: 14.666666666666647,
    text: 'analysis, and language translation.\n',
  },
  {
    x: 744.0,
    y: 6313.1866666666665,
    width: 7.426666666666733,
    height: 13.333333333333332,
    text: '6\n',
  },
  {
    x: 106.70706666666666,
    y: 6493.46,
    width: 614.8383999999999,
    height: 14.666666666666666,
    text: 'Deep Learning: Deep learning is a subset of machine learning that uses neural networks \n',
  },
  {
    x: 106.70706666666666,
    y: 6518.789333333332,
    width: 620.3633333333337,
    height: 14.666666666666666,
    text: 'with multiple layers to extract intricate patterns from large datasets. It is commonly used \n',
  },
  {
    x: 106.70706666666666,
    y: 6544.118666666666,
    width: 236.6305333333333,
    height: 14.666666666666666,
    text: 'for image and speech recognition.\n',
  },
  {
    x: 106.70706666666666,
    y: 6584.627999999999,
    width: 612.1382666666668,
    height: 14.666666666666666,
    text: 'Predictive Analytics: Predictive analytics tools use historical data and machine learning \n',
  },
  {
    x: 106.70706666666666,
    y: 6609.957333333333,
    width: 635.9437333333336,
    height: 14.666666666666666,
    text: 'algorithms to predict future outcomes. This is useful for forecasting trends, identifying risks, \n',
  },
  {
    x: 106.70706666666666,
    y: 6635.286666666667,
    width: 298.09559999999993,
    height: 14.666666666666666,
    text: 'and optimizing decision-making processes.\n',
  },
  {
    x: 106.70706666666666,
    y: 6675.4439999999995,
    width: 614.5876000000003,
    height: 14.666666666666666,
    text: 'Data Mining: Data mining techniques are used to discover patterns, trends, and insights \n',
  },
  {
    x: 106.70706666666666,
    y: 6700.773333333333,
    width: 607.3422666666668,
    height: 14.666666666666666,
    text: 'from large datasets. This includes clustering, classification, association rule mining, and \n',
  },
  {
    x: 106.70706666666666,
    y: 6726.102666666667,
    width: 132.7465333333334,
    height: 14.666666666666666,
    text: 'anomaly detection.\n',
  },
  {
    x: 106.70706666666666,
    y: 6766.685333333333,
    width: 620.0890666666669,
    height: 14.666666666666666,
    text: 'Business Intelligence (BI) Tools: BI tools leverage AI for data visualization, dashboards, \n',
  },
  {
    x: 106.70706666666666,
    y: 6792.014666666666,
    width: 453.92746666666676,
    height: 14.666666666666666,
    text: 'and reporting to provide actionable insights for decision-making. \n',
  },
  {
    x: 72.0,
    y: 6856.573333333334,
    width: 273.44613333333325,
    height: 18.666666666666664,
    text: '4. Start small and experiment\n',
  },
  {
    x: 72.00573333333332,
    y: 6891.527999999999,
    width: 663.8235999999999,
    height: 36.00666666666666,
    text: 'Begin by implementing AI in a small-scale pilot project to test the effectiveness of the tools and \nalgorithms. This allows you to identify any challenges early on and fine-tune your approach.\n',
  },
  {
    x: 72.00573333333332,
    y: 6955.533333333333,
    width: 148.0306666666667,
    height: 14.666666666666666,
    text: 'Here\u2019s how you do it: \n',
  },
  {
    x: 106.70706666666666,
    y: 6994.091999999999,
    width: 314.1438666666666,
    height: 14.666666666666666,
    text: 'Define Scope and Objectives: Clearly define \n',
  },
  {
    x: 106.70706666666666,
    y: 7019.421333333333,
    width: 310.2982666666667,
    height: 14.666666666666666,
    text: 'the scope and objectives of the pilot project. \n',
  },
  {
    x: 106.70706666666666,
    y: 7044.750666666667,
    width: 340.1449333333333,
    height: 14.666666666666666,
    text: 'Determine the specific goals you aim to achieve, \n',
  },
  {
    x: 106.70706666666666,
    y: 7070.079999999999,
    width: 310.5637333333333,
    height: 14.666666666666666,
    text: 'such as testing a new AI tool, evaluating the \n',
  },
  {
    x: 106.70706666666666,
    y: 7095.409333333333,
    width: 322.73706666666664,
    height: 14.666666666666666,
    text: 'performance of a machine learning algorithm, \n',
  },
  {
    x: 106.70706666666666,
    y: 7120.738666666666,
    width: 319.2889333333334,
    height: 14.666666666666666,
    text: 'or exploring the potential of natural language \n',
  },
  {
    x: 106.70706666666666,
    y: 7146.067999999999,
    width: 198.07039999999998,
    height: 14.666666666666666,
    text: 'processing for data analysis.\n',
  },
  {
    x: 744.0,
    y: 7373.1866666666665,
    width: 7.2266666666666115,
    height: 13.333333333333332,
    text: '7\n',
  },
  {
    x: 137.90706666666665,
    y: 7570.259999999999,
    width: 535.5372,
    height: 14.666666666666666,
    text: 'Select Data and Prepare Environment: Choose relevant data sets that align \n',
  },
  {
    x: 137.90706666666665,
    y: 7595.589333333333,
    width: 547.1649333333336,
    height: 14.666666666666666,
    text: 'with the objectives of the pilot project. Ensure the data is representative, clean, \n',
  },
  {
    x: 137.90706666666665,
    y: 7620.9186666666665,
    width: 516.8049333333336,
    height: 14.666666666666666,
    text: 'and properly formatted for analysis. Set up a controlled environment, such \n',
  },
  {
    x: 137.90706666666665,
    y: 7646.248,
    width: 508.00493333333344,
    height: 14.666666666666666,
    text: 'as a test dataset or sandbox environment, where you can conduct the AI \n',
  },
  {
    x: 137.90706666666665,
    y: 7671.577333333333,
    width: 372.0874666666665,
    height: 14.666666666666666,
    text: 'experiment in isolation from your production systems.\n',
  },
  {
    x: 137.90706666666665,
    y: 7711.3679999999995,
    width: 520.0770666666668,
    height: 14.666666666666666,
    text: 'Develop Experiment Plan: Create a detailed experiment plan that outlines \n',
  },
  {
    x: 137.90706666666665,
    y: 7736.6973333333335,
    width: 518.4490666666666,
    height: 14.666666666666666,
    text: 'the methodology, variables, and key performance indicators (KPIs) for the \n',
  },
  {
    x: 137.90706666666665,
    y: 7762.026666666666,
    width: 541.021066666667,
    height: 14.666666666666666,
    text: 'pilot project. Define how you will measure the success of the AI analysis, what \n',
  },
  {
    x: 137.90706666666665,
    y: 7787.356,
    width: 515.3236000000002,
    height: 14.666666666666666,
    text: 'benchmarks you will use, and what insights you aim to gain from the data \n',
  },
  {
    x: 137.90706666666665,
    y: 7812.685333333333,
    width: 116.0998666666667,
    height: 14.666666666666666,
    text: 'analysis process.\n',
  },
  {
    x: 137.90706666666665,
    y: 7850.98,
    width: 495.2449333333336,
    height: 14.666666666666666,
    text: 'Execute the Pilot Project: Implement the AI experiment in a controlled \n',
  },
  {
    x: 137.90706666666665,
    y: 7876.309333333333,
    width: 563.3158666666669,
    height: 14.666666666666666,
    text: 'environment, following the experiment plan you have developed. Run the AI tools \n',
  },
  {
    x: 137.90706666666665,
    y: 7901.638666666666,
    width: 557.6662666666671,
    height: 14.666666666666666,
    text: 'and algorithms on the selected data sets and monitor their performance closely. \n',
  },
  {
    x: 137.90706666666665,
    y: 7926.967999999999,
    width: 539.9181333333333,
    height: 14.666666666666666,
    text: 'Track key metrics and outcomes to assess the effectiveness of the AI analysis.\n',
  },
  {
    x: 137.90706666666665,
    y: 7967.7413333333325,
    width: 489.6569333333332,
    height: 14.666666666666666,
    text: 'Monitor Performance and Gather Insights: Continuously monitor the \n',
  },
  {
    x: 137.90706666666665,
    y: 7993.0706666666665,
    width: 541.3422666666665,
    height: 14.666666666666666,
    text: 'performance of the AI tools and algorithms throughout the pilot project. Keep \n',
  },
  {
    x: 137.90706666666665,
    y: 8018.4,
    width: 552.0768,
    height: 14.666666666666666,
    text: 'track of any issues, challenges, or unexpected results that arise during the data \n',
  },
  {
    x: 137.90706666666665,
    y: 8043.729333333333,
    width: 530.3554666666666,
    height: 14.666666666666666,
    text: 'analysis process. Gather insights from the data analysis to identify patterns, \n',
  },
  {
    x: 137.90706666666665,
    y: 8069.058666666666,
    width: 309.05306666666667,
    height: 14.666666666666666,
    text: 'trends, and potential areas for improvement.\n',
  },
  {
    x: 137.90706666666665,
    y: 8109.098666666666,
    width: 553.9116,
    height: 14.666666666666666,
    text: 'Analyze Results and Iterate: Analyze the results of the pilot project to evaluate \n',
  },
  {
    x: 137.90706666666665,
    y: 8134.428,
    width: 558.4729333333335,
    height: 14.666666666666666,
    text: 'the effectiveness of the AI tools and algorithms. Compare the outcomes against \n',
  },
  {
    x: 137.90706666666665,
    y: 8159.757333333332,
    width: 553.4144000000002,
    height: 14.666666666666666,
    text: 'the defined objectives and KPIs to assess the success of the experiment. Based \n',
  },
  {
    x: 137.90706666666665,
    y: 8185.086666666666,
    width: 563.122266666667,
    height: 14.666666666666666,
    text: 'on the analysis, iterate on the experiment by making adjustments to the AI tools, \n',
  },
  {
    x: 137.90706666666665,
    y: 8210.416,
    width: 542.3528,
    height: 14.666666666666666,
    text: 'algorithms, or data preparation process to enhance performance and achieve \n',
  },
  {
    x: 137.90706666666665,
    y: 8235.745333333332,
    width: 94.2612,
    height: 14.666666666666666,
    text: 'better results.\n',
  },
  {
    x: 137.90706666666665,
    y: 8274.289333333332,
    width: 501.12919999999997,
    height: 14.666666666666666,
    text: 'Document Learnings and Recommendations: Document the learnings, \n',
  },
  {
    x: 137.90706666666665,
    y: 8299.618666666665,
    width: 558.9994666666669,
    height: 14.666666666666647,
    text: 'insights, and recommendations from the pilot project. Capture key findings, best \n',
  },
  {
    x: 137.90706666666665,
    y: 8324.948,
    width: 543.3662666666668,
    height: 14.666666666666666,
    text: 'practices, and lessons learned that can be applied to future AI experiments or \n',
  },
  {
    x: 137.90706666666665,
    y: 8350.277333333332,
    width: 409.56080000000003,
    height: 14.666666666666647,
    text: 'scaled-up data analysis initiatives within your organization.\n',
  },
  {
    x: 744.0,
    y: 8433.186666666666,
    width: 7.719999999999951,
    height: 13.333333333333332,
    text: '8\n',
  },
  {
    x: 72.0,
    y: 8599.773333333333,
    width: 181.13946666666658,
    height: 18.666666666666664,
    text: '5. Learn and iterate\n',
  },
  {
    x: 72.0,
    y: 8634.793333333333,
    width: 654.5205333333334,
    height: 57.34666666666665,
    text: 'Continuously learn from your AI implementations and iterate on your strategies based on the \ninsights gained. This iterative process helps refine your data analysis techniques and improves \nthe accuracy of your results.\n',
  },
  {
    x: 72.0,
    y: 8720.138666666666,
    width: 564.2090666666667,
    height: 14.666666666666666,
    text: 'Here are some tips to effectively implement a continuous improvement approach:\n',
  },
  {
    x: 72.0,
    y: 8760.073333333334,
    width: 273.7489333333332,
    height: 14.666666666666666,
    text: '\u2022  Establish clear goals and metrics to \n',
  },
  {
    x: 419.996,
    y: 8760.132,
    width: 239.87039999999993,
    height: 14.666666666666666,
    text: '\u2022  Stay informed about the latest \n',
  },
  {
    x: 95.99466666666666,
    y: 8781.413333333334,
    width: 258.6583999999999,
    height: 36.00666666666666,
    text: 'measure the effectiveness of your AI \nimplementations. \n',
  },
  {
    x: 72.0,
    y: 8834.756,
    width: 254.36253333333332,
    height: 14.666666666666666,
    text: '\u2022  Regularly review and analyze the \n',
  },
  {
    x: 95.99466666666666,
    y: 8856.096,
    width: 239.51839999999999,
    height: 36.00666666666666,
    text: 'performance of your AI models to \nidentify areas for improvement.\n',
  },
  {
    x: 72.0,
    y: 8909.438666666665,
    width: 260.1690666666666,
    height: 14.666666666666666,
    text: '\u2022  Encourage collaboration between \n',
  },
  {
    x: 95.99466666666666,
    y: 8930.778666666665,
    width: 276.46226666666655,
    height: 36.00666666666666,
    text: 'data scientists, business analysts, and \ndomain experts to gain diverse insights.\n',
  },
  {
    x: 72.0,
    y: 8984.121333333333,
    width: 300.3571999999999,
    height: 14.666666666666666,
    text: '\u2022  Leverage feedback from end-users and \n',
  },
  {
    x: 95.99466666666666,
    y: 9005.461333333333,
    width: 269.02773333333334,
    height: 36.00666666666666,
    text: 'stakeholders to enhance the relevance \nand accuracy of your AI solutions.\n',
  },
  {
    x: 443.99066666666664,
    y: 8781.472,
    width: 265.4637333333334,
    height: 57.34666666666665,
    text: 'advancements in AI technologies and \nincorporate new techniques into your \nstrategies. \n',
  },
  {
    x: 419.996,
    y: 8856.154666666665,
    width: 266.07973333333325,
    height: 14.666666666666666,
    text: '\u2022  Document your learnings and best \n',
  },
  {
    x: 443.99066666666664,
    y: 8877.494666666666,
    width: 299.3730666666666,
    height: 36.00666666666666,
    text: 'practices to create a knowledge repository \nfor future reference.\n',
  },
  {
    x: 419.996,
    y: 8930.837333333333,
    width: 315.97573333333327,
    height: 14.666666666666666,
    text: '\u2022  Embrace failure as a learning opportunity \n',
  },
  {
    x: 443.99066666666664,
    y: 8952.177333333333,
    width: 269.9370666666666,
    height: 36.00666666666666,
    text: 'and use it to drive innovation and \nrefinement in your AI implementations.\n',
  },
  {
    x: 116.39999999999999,
    y: 9102.88,
    width: 137.18399999999997,
    height: 16.0,
    text: 'FREE RESOURCE:\n',
  },
  {
    x: 356.07319999999993,
    y: 9100.48,
    width: 257.0848,
    height: 16.0,
    text: 'HubSpot\u2019s AI Adoption Checklist\n',
  },
  {
    x: 744.0,
    y: 9493.186666666666,
    width: 7.346666666666654,
    height: 13.333333333333332,
    text: '9\n',
  },
  {
    x: 72.0,
    y: 9663.317066666667,
    width: 642.8032000000001,
    height: 93.86666666666663,
    text: 'Benefits and Challenges of \nIncorporating AI in Data Analysis\n',
  },
  {
    x: 74.88,
    y: 9789.353333333333,
    width: 323.57159999999993,
    height: 78.68666666666664,
    text: 'The integration of artificial intelligence (AI) \ninto data analysis has become a significant \nfactor in enhancing operational efficiency and \ndecision-making processes for organizations. \n',
  },
  {
    x: 74.88,
    y: 9896.038666666667,
    width: 318.2622666666666,
    height: 185.38666666666654,
    text: 'While AI offers advantages such as improved \nefficiency and scalability, it also presents \nchallenges like data quality, skill gaps, and \nsecurity concerns. By approaching the \nintegration of AI with a balanced perspective \nand a focus on overcoming obstacles, \norganizations can leverage its potential to \neffectively drive innovation and sustainable \ngrowth in a data-driven era.\n',
  },
  {
    x: 106.66666666666666,
    y: 10143.84,
    width: 86.35733333333333,
    height: 21.333333333333332,
    text: 'Benefits\n',
  },
  {
    x: 105.33333333333333,
    y: 10207.913333333334,
    width: 573.1806666666665,
    height: 14.666666666666666,
    text: 'Incorporating artificial intelligence (AI) into your data analytics processes offers a \n',
  },
  {
    x: 105.33333333333333,
    y: 10233.242666666665,
    width: 586.3102666666668,
    height: 14.666666666666666,
    text: 'multitude of benefits that can dramatically enhance the efficiency and effectiveness \n',
  },
  {
    x: 105.33333333333333,
    y: 10258.572,
    width: 554.9558666666666,
    height: 14.666666666666666,
    text: 'of your operations. By leveraging AI capabilities, you can unlock a new realm of \n',
  },
  {
    x: 105.33333333333333,
    y: 10283.901333333333,
    width: 573.9448000000002,
    height: 14.666666666666666,
    text: 'possibilities for extracting insights from your data and making informed decisions. \n',
  },
  {
    x: 105.33333333333333,
    y: 10334.574666666667,
    width: 467.59973333333335,
    height: 14.666666666666666,
    text: 'Here are some key advantages of incorporating AI in data analysis:\n',
  },
  {
    x: 142.70399999999998,
    y: 10380.98,
    width: 340.3223999999998,
    height: 14.666666666666666,
    text: 'Improved Efficiency and Faster Data Analysis: \n',
  },
  {
    x: 142.70399999999998,
    y: 10412.982666666667,
    width: 530.7969333333333,
    height: 14.666666666666666,
    text: 'AI-powered algorithms can process vast amounts of data at unprecedented \n',
  },
  {
    x: 142.70399999999998,
    y: 10438.312,
    width: 521.4850666666669,
    height: 14.666666666666647,
    text: 'speeds, enabling you to extract valuable insights in a fraction of the time it \n',
  },
  {
    x: 142.70399999999998,
    y: 10463.641333333333,
    width: 259.96519999999987,
    height: 14.666666666666666,
    text: 'would take using traditional methods.\n',
  },
  {
    x: 744.0,
    y: 10553.186666666666,
    width: 14.760000000000066,
    height: 13.333333333333332,
    text: '10\n',
  },
  {
    x: 142.70706666666666,
    y: 10753.619999999999,
    width: 280.30639999999994,
    height: 14.666666666666666,
    text: 'Enhanced Accuracy and Reduced Bias:\n',
  },
  {
    x: 142.70706666666666,
    y: 10785.622666666666,
    width: 543.0142666666666,
    height: 14.666666666666666,
    text: 'AI systems are capable of analyzing data objectively and without the inherent \n',
  },
  {
    x: 142.70706666666666,
    y: 10810.952,
    width: 546.1940000000001,
    height: 14.666666666666666,
    text: 'biases that human analysts may introduce. This leads to more accurate results \n',
  },
  {
    x: 142.70706666666666,
    y: 10836.281333333332,
    width: 314.44893333333334,
    height: 14.666666666666666,
    text: 'and helps eliminate potential sources of error.\n',
  },
  {
    x: 142.70706666666666,
    y: 10875.426666666666,
    width: 320.4050666666666,
    height: 14.666666666666666,
    text: 'Advanced Insights and Trend Identification:\n',
  },
  {
    x: 142.70706666666666,
    y: 10907.429333333333,
    width: 539.3622666666666,
    height: 14.666666666666666,
    text: 'AI algorithms can uncover complex patterns and trends within your data that \n',
  },
  {
    x: 142.70706666666666,
    y: 10932.758666666665,
    width: 537.1344,
    height: 14.666666666666666,
    text: 'may not be apparent through manual analysis. This provides you with deeper \n',
  },
  {
    x: 142.70706666666666,
    y: 10958.088,
    width: 346.34746666666666,
    height: 14.666666666666666,
    text: 'insights and a clearer understanding of your data.\n',
  },
  {
    x: 142.70706666666666,
    y: 10998.465333333334,
    width: 326.60906666666654,
    height: 14.666666666666666,
    text: 'Scalability for Handling Large Data Volumes:\n',
  },
  {
    x: 142.70706666666666,
    y: 11030.468,
    width: 513.3142666666668,
    height: 14.666666666666666,
    text: 'AI technologies are designed to scale effortlessly, allowing you to process \n',
  },
  {
    x: 142.70706666666666,
    y: 11055.797333333332,
    width: 532.1462666666666,
    height: 14.666666666666666,
    text: 'and analyze massive volumes of data efficiently. This scalability is crucial for \n',
  },
  {
    x: 142.70706666666666,
    y: 11081.126666666665,
    width: 326.13826666666665,
    height: 14.666666666666666,
    text: 'businesses dealing with ever-growing datasets.\n',
  },
  {
    x: 142.70706666666666,
    y: 11121.504,
    width: 233.59453333333317,
    height: 14.666666666666666,
    text: 'Automation of Repetitive Tasks: \n',
  },
  {
    x: 142.70706666666666,
    y: 11153.506666666664,
    width: 547.0036,
    height: 14.666666666666666,
    text: 'AI can automate routine data analysis tasks, freeing up valuable time for data \n',
  },
  {
    x: 142.70706666666666,
    y: 11178.836,
    width: 523.8742666666669,
    height: 14.666666666666666,
    text: 'scientists and analysts to focus on more strategic and high-value activities. \n',
  },
  {
    x: 142.70706666666666,
    y: 11204.165333333332,
    width: 552.6796000000002,
    height: 14.666666666666666,
    text: 'This leads to increased productivity and allows teams to work on more complex \n',
  },
  {
    x: 142.70706666666666,
    y: 11229.494666666666,
    width: 110.89320000000004,
    height: 14.666666666666666,
    text: 'analytical tasks.\n',
  },
  {
    x: 744.0,
    y: 11613.186666666665,
    width: 13.333333333333332,
    height: 13.333333333333332,
    text: '11\n',
  },
  {
    x: 90.85933333333332,
    y: 11778.666666666666,
    width: 114.92266666666667,
    height: 21.333333333333332,
    text: 'Challenges\n',
  },
  {
    x: 72.0,
    y: 11822.953333333333,
    width: 653.3178666666668,
    height: 14.666666666666666,
    text: 'While the benefits of incorporating artificial intelligence (AI) into data analytics are abundant, \n',
  },
  {
    x: 72.0,
    y: 11848.282666666666,
    width: 646.6342666666667,
    height: 14.666666666666666,
    text: 'it\u2019s important to navigate and overcome the challenges that may arise during the integration \n',
  },
  {
    x: 72.0,
    y: 11873.612000000001,
    width: 669.3382666666668,
    height: 14.666666666666666,
    text: 'process. By understanding and addressing these hurdles, you can harness the full potential of AI \n',
  },
  {
    x: 72.0,
    y: 11898.941333333332,
    width: 409.50360000000006,
    height: 14.666666666666666,
    text: 'technologies for enhancing your data analysis capabilities. \n',
  },
  {
    x: 72.0,
    y: 11949.614666666665,
    width: 648.337066666667,
    height: 14.666666666666666,
    text: 'Here are some key challenges to consider when incorporating AI in data analytics, along with \n',
  },
  {
    x: 72.0,
    y: 11974.944,
    width: 192.2932,
    height: 14.666666666666666,
    text: 'strategies to mitigate them:\n',
  },
  {
    x: 107.40533333333333,
    y: 12017.125333333332,
    width: 283.5931999999998,
    height: 14.666666666666666,
    text: 'Data Quality and Hallucination Issues: \n',
  },
  {
    x: 107.40533333333333,
    y: 12049.127999999999,
    width: 611.5794666666666,
    height: 14.666666666666666,
    text: 'Ensuring the accuracy and reliability of the data inputs is critical for the effectiveness of \n',
  },
  {
    x: 107.40533333333333,
    y: 12074.457333333332,
    width: 622.0822666666669,
    height: 14.666666666666666,
    text: 'AI in data analytics. Implement data quality checks and validation processes to minimize \n',
  },
  {
    x: 107.40533333333333,
    y: 12099.786666666667,
    width: 481.78093333333345,
    height: 14.666666666666666,
    text: 'errors and mitigate the risks of AI \u201challucinating\u201d inaccurate patterns.\n',
  },
  {
    x: 107.40533333333333,
    y: 12140.002666666667,
    width: 364.3170666666666,
    height: 14.666666666666666,
    text: 'Skill and Knowledge Gap in Data Science and AI:  \n',
  },
  {
    x: 107.40533333333333,
    y: 12172.00533333333,
    width: 601.0781333333337,
    height: 14.666666666666666,
    text: 'Bridging the gap in expertise and skills required to successfully implement AI solutions \n',
  },
  {
    x: 107.40533333333333,
    y: 12197.334666666666,
    width: 604.4529333333336,
    height: 14.666666666666666,
    text: 'is paramount. Invest in training programs, upskilling initiatives, and collaborations with \n',
  },
  {
    x: 107.40533333333333,
    y: 12222.663999999999,
    width: 392.9449333333333,
    height: 14.666666666666666,
    text: 'experienced data scientists to build a proficient AI team.\n',
  },
  {
    x: 107.40533333333333,
    y: 12264.801333333333,
    width: 283.24120000000005,
    height: 14.666666666666666,
    text: 'Interpretability of Complex AI Models: \n',
  },
  {
    x: 107.40533333333333,
    y: 12296.803999999998,
    width: 592.5128000000001,
    height: 14.666666666666666,
    text: 'Complex AI models may deliver powerful insights but can be difficult to interpret and \n',
  },
  {
    x: 107.40533333333333,
    y: 12322.133333333333,
    width: 594.5822666666669,
    height: 14.666666666666666,
    text: 'explain. Incorporate explainable AI techniques to enhance the transparency of model \n',
  },
  {
    x: 107.40533333333333,
    y: 12347.462666666666,
    width: 296.8196,
    height: 14.666666666666666,
    text: 'decisions and build trust with stakeholders.\n',
  },
  {
    x: 107.40533333333333,
    y: 12389.6,
    width: 228.87186666666665,
    height: 14.666666666666666,
    text: 'Security and Privacy Concerns: \n',
  },
  {
    x: 107.40533333333333,
    y: 12421.602666666666,
    width: 605.2757333333335,
    height: 14.666666666666666,
    text: 'Safeguarding sensitive data from breaches and ensuring compliance with data privacy \n',
  },
  {
    x: 107.40533333333333,
    y: 12446.932,
    width: 604.5981333333335,
    height: 14.666666666666666,
    text: 'regulations are crucial considerations. Implement robust security measures, encryption \n',
  },
  {
    x: 107.40533333333333,
    y: 12472.261333333332,
    width: 543.6889333333334,
    height: 14.666666666666666,
    text: 'protocols, and anonymization techniques to protect data integrity and privacy.\n',
  },
  {
    x: 107.40533333333333,
    y: 12520.148000000001,
    width: 413.99159999999983,
    height: 14.666666666666666,
    text: 'Implementation Complexity and Resource Requirements:\n',
  },
  {
    x: 107.40533333333333,
    y: 12552.150666666665,
    width: 575.9423999999999,
    height: 14.666666666666647,
    text: 'Integrating AI into existing data analytics processes can be complex and resource-\n',
  },
  {
    x: 107.40533333333333,
    y: 12577.48,
    width: 598.1330666666669,
    height: 14.666666666666666,
    text: 'intensive. Develop a clear roadmap, allocate sufficient resources, and collaborate with \n',
  },
  {
    x: 107.40533333333333,
    y: 12602.809333333333,
    width: 565.2342666666668,
    height: 14.666666666666647,
    text: 'expert partners to streamline the implementation and deployment of AI solutions.\n',
  },
  {
    x: 744.0,
    y: 12673.186666666665,
    width: 13.973333333333358,
    height: 13.333333333333332,
    text: '12\n',
  },
  {
    x: 76.0,
    y: 12843.317066666667,
    width: 507.29813333333345,
    height: 42.666666666666664,
    text: 'AI Tools for Data Analysis \n',
  },
  {
    x: 74.88,
    y: 12920.393333333333,
    width: 668.8689333333336,
    height: 57.34666666666665,
    text: 'This chapter provides a broad overview of available tools in several key areas: Machine \nLearning, Natural Language Processing (NLP), Deep Learning, Predictive Analytics, Data Mining, \nand Business Intelligence (BI). \n',
  },
  {
    x: 74.88,
    y: 13005.738666666666,
    width: 657.0754666666668,
    height: 78.68666666666664,
    text: 'Each tool has its own strengths and potential applications. You might find them useful in areas \nranging from automating tasks to extracting insights from data. As you explore this chapter, \nconsider your specific needs, the scope of your projects, and your current abilities to make the \nbest selection.\n',
  },
  {
    x: 74.88,
    y: 13112.423999999999,
    width: 666.9505333333334,
    height: 57.34666666666665,
    text: 'Each tool is one piece of a much larger puzzle. The aim here is not to promote any specific tool, \nbut to introduce you to a variety of options. Understanding these tools can be beneficial for any \ndata analysis project. \n',
  },
  {
    x: 96.0,
    y: 13226.653333333332,
    width: 164.9928,
    height: 18.666666666666664,
    text: 'Machine Learning\n',
  },
  {
    x: 96.0,
    y: 13283.273333333333,
    width: 80.85586666666666,
    height: 14.666666666666666,
    text: 'TensorFlow\n',
  },
  {
    x: 269.756,
    y: 13284.226666666666,
    width: 434.27560000000005,
    height: 14.666666666666666,
    text: 'An open-source machine learning library developed by Google \n',
  },
  {
    x: 269.756,
    y: 13309.555999999999,
    width: 410.50093333333336,
    height: 14.666666666666666,
    text: 'that offers a wide range of tools and resources for building \n',
  },
  {
    x: 269.756,
    y: 13334.885333333334,
    width: 264.7450666666666,
    height: 14.666666666666666,
    text: 'and training machine learning models.\n',
  },
  {
    x: 96.0,
    y: 13369.674666666666,
    width: 83.02800000000002,
    height: 14.666666666666666,
    text: 'Scikit-learn\n',
  },
  {
    x: 269.756,
    y: 13370.613333333331,
    width: 407.4062666666666,
    height: 14.666666666666666,
    text: 'A popular machine learning library in Python that provides \n',
  },
  {
    x: 269.756,
    y: 13395.942666666666,
    width: 420.48746666666676,
    height: 14.666666666666666,
    text: 'simple and efficient tools for data mining and data analysis, \n',
  },
  {
    x: 269.756,
    y: 13421.271999999999,
    width: 260.3743999999999,
    height: 14.666666666666666,
    text: 'specific to building predictive models.\n',
  },
  {
    x: 96.0,
    y: 13457.029333333334,
    width: 57.40533333333333,
    height: 14.666666666666666,
    text: 'PyTorch\n',
  },
  {
    x: 269.756,
    y: 13457.968,
    width: 429.90640000000013,
    height: 14.666666666666666,
    text: 'A deep learning framework that provides flexibility and speed \n',
  },
  {
    x: 269.756,
    y: 13483.297333333332,
    width: 283.89826666666664,
    height: 14.666666666666666,
    text: 'for building and training neural networks.\n',
  },
  {
    x: 96.0,
    y: 13518.306666666665,
    width: 89.39186666666667,
    height: 14.666666666666666,
    text: 'IBM Watson\n',
  },
  {
    x: 269.756,
    y: 13519.245333333332,
    width: 427.32360000000017,
    height: 14.666666666666666,
    text: 'A suite of AI tools and services that include machine learning \n',
  },
  {
    x: 269.756,
    y: 13544.574666666667,
    width: 416.48493333333346,
    height: 14.666666666666666,
    text: 'capabilities for analyzing data, automating repetitive tasks, \n',
  },
  {
    x: 269.756,
    y: 13569.903999999999,
    width: 167.0210666666666,
    height: 14.666666666666666,
    text: 'and generating insights.\n',
  },
  {
    x: 96.0,
    y: 13612.54,
    width: 82.07466666666667,
    height: 30.667999999999985,
    text: 'Amazon \nSageMaker\n',
  },
  {
    x: 269.756,
    y: 13613.478666666666,
    width: 385.7289333333334,
    height: 14.666666666666647,
    text: ' A fully managed service by Amazon Web Services that \n',
  },
  {
    x: 269.756,
    y: 13638.807999999999,
    width: 414.2702666666669,
    height: 14.666666666666666,
    text: 'provides tools for building, training, and deploying machine \n',
  },
  {
    x: 269.756,
    y: 13664.137333333332,
    width: 171.24506666666662,
    height: 14.666666666666647,
    text: 'learning models at scale.\n',
  },
  {
    x: 744.0,
    y: 13733.186666666665,
    width: 13.719999999999951,
    height: 13.333333333333332,
    text: '13\n',
  },
  {
    x: 96.0,
    y: 13990.973333333332,
    width: 336.5394666666666,
    height: 18.666666666666664,
    text: 'Natural Language Processing (NLP) \n',
  },
  {
    x: 96.0,
    y: 14047.593333333332,
    width: 104.03066666666669,
    height: 14.666666666666666,
    text: 'OpenAI GPT-4\n',
  },
  {
    x: 269.756,
    y: 14048.546666666665,
    width: 383.77973333333335,
    height: 14.666666666666666,
    text: 'A state-of-the-art language processing model that can \n',
  },
  {
    x: 269.756,
    y: 14073.875999999998,
    width: 413.07053333333334,
    height: 14.666666666666666,
    text: 'generate human-like text responses and assist with various \n',
  },
  {
    x: 269.756,
    y: 14099.205333333333,
    width: 162.81319999999997,
    height: 14.666666666666666,
    text: 'language-related tasks.\n',
  },
  {
    x: 96.0,
    y: 14142.633333333333,
    width: 104.48533333333333,
    height: 46.66933333333319,
    text: 'Google Cloud \nNatural \nLanguage API\n',
  },
  {
    x: 269.756,
    y: 14143.572,
    width: 320.9198666666667,
    height: 14.66666666666659,
    text: 'A tool that provides powerful NLP capabilities \n',
  },
  {
    x: 269.756,
    y: 14168.901333333331,
    width: 319.62773333333325,
    height: 14.666666666666666,
    text: 'for sentiment analysis, entity recognition, and \n',
  },
  {
    x: 269.756,
    y: 14194.230666666666,
    width: 146.34253333333336,
    height: 14.666666666666666,
    text: 'language translation.\n',
  },
  {
    x: 96.0,
    y: 14240.709333333332,
    width: 117.24386666666669,
    height: 30.667999999999967,
    text: 'Microsoft Azure \nText Analytics\n',
  },
  {
    x: 269.756,
    y: 14241.647999999997,
    width: 404.3717333333333,
    height: 14.666666666666666,
    text: 'A cloud-based service that offers NLP functionalities such \n',
  },
  {
    x: 269.756,
    y: 14266.977333333332,
    width: 412.6129333333334,
    height: 14.666666666666666,
    text: 'as sentiment analysis, key phrase extraction, and language \n',
  },
  {
    x: 269.756,
    y: 14292.306666666665,
    width: 219.68906666666658,
    height: 14.666666666666666,
    text: 'detection for text data analysis.\n',
  },
  {
    x: 96.0,
    y: 14337.245333333332,
    width: 131.17866666666663,
    height: 30.667999999999967,
    text: 'NLTK (Natural \nLanguage Toolkit)\n',
  },
  {
    x: 269.756,
    y: 14338.169333333333,
    width: 388.8822666666666,
    height: 14.666666666666666,
    text: 'A popular Python library for NLP tasks like tokenization, \n',
  },
  {
    x: 269.756,
    y: 14363.498666666666,
    width: 424.6689333333335,
    height: 14.666666666666666,
    text: 'stemming, tagging, parsing, and more, ideal for text analysis \n',
  },
  {
    x: 269.756,
    y: 14388.827999999998,
    width: 237.21573333333322,
    height: 14.666666666666666,
    text: 'and language processing projects.\n',
  },
  {
    x: 96.0,
    y: 14438.313333333334,
    width: 130.97333333333336,
    height: 14.666666666666666,
    text: 'Stanford CoreNLP\n',
  },
  {
    x: 269.756,
    y: 14439.222666666665,
    width: 397.84360000000004,
    height: 14.666666666666666,
    text: 'Developed by Stanford University, this is a robust natural \n',
  },
  {
    x: 269.756,
    y: 14464.552,
    width: 399.3982666666668,
    height: 14.666666666666666,
    text: 'language processing toolkit that provides a set of human \n',
  },
  {
    x: 269.756,
    y: 14489.881333333333,
    width: 418.9782666666668,
    height: 14.666666666666666,
    text: 'language technology tools. It includes part-of-speech (POS) \n',
  },
  {
    x: 269.756,
    y: 14515.210666666666,
    width: 403.71026666666677,
    height: 14.666666666666666,
    text: 'tagging, named entity recognition (NER), pattern learning \n',
  },
  {
    x: 269.756,
    y: 14540.54,
    width: 390.8050666666668,
    height: 14.666666666666666,
    text: 'and much more. Its wide range of grammatical analysis \n',
  },
  {
    x: 269.756,
    y: 14565.869333333332,
    width: 376.21026666666677,
    height: 14.666666666666666,
    text: 'tools makes it valuable for both machine learning and \n',
  },
  {
    x: 269.756,
    y: 14591.198666666665,
    width: 127.48119999999994,
    height: 14.666666666666666,
    text: 'linguistic research.\n',
  },
  {
    x: 744.0,
    y: 14793.186666666665,
    width: 14.933333333333394,
    height: 13.333333333333332,
    text: '14\n',
  },
  {
    x: 96.0,
    y: 14971.346666666666,
    width: 135.55733333333333,
    height: 18.666666666666664,
    text: 'Deep Learning\n',
  },
  {
    x: 96.0,
    y: 15027.966666666667,
    width: 41.08133333333332,
    height: 14.666666666666666,
    text: 'Keras\n',
  },
  {
    x: 269.756,
    y: 15028.92,
    width: 422.0450666666667,
    height: 14.666666666666666,
    text: 'Keras is a high-level neural networks API that can run on top \n',
  },
  {
    x: 269.756,
    y: 15054.249333333333,
    width: 422.0289333333335,
    height: 14.666666666666666,
    text: 'of TensorFlow or Theano. It simplifies the process of building \n',
  },
  {
    x: 269.756,
    y: 15079.578666666665,
    width: 421.7341333333335,
    height: 14.666666666666666,
    text: 'and training neural networks and is suitable for beginners as \n',
  },
  {
    x: 269.756,
    y: 15104.908,
    width: 178.49333333333325,
    height: 14.666666666666666,
    text: 'well as experienced users.\n',
  },
  {
    x: 96.0,
    y: 15148.922666666665,
    width: 39.27733333333333,
    height: 14.666666666666666,
    text: 'Caffe\n',
  },
  {
    x: 269.756,
    y: 15149.861333333334,
    width: 370.7263999999999,
    height: 14.666666666666666,
    text: 'Caffe is a deep learning framework developed by the \n',
  },
  {
    x: 269.756,
    y: 15175.190666666665,
    width: 380.0676000000001,
    height: 14.666666666666666,
    text: 'Berkeley Vision and Learning Center. It is known for its \n',
  },
  {
    x: 269.756,
    y: 15200.519999999999,
    width: 373.6876000000002,
    height: 14.66666666666659,
    text: 'speed and efficiency in training deep neural networks \n',
  },
  {
    x: 269.756,
    y: 15225.849333333332,
    width: 355.6050666666666,
    height: 14.666666666666666,
    text: 'and is commonly used for image classification and \n',
  },
  {
    x: 269.756,
    y: 15251.178666666667,
    width: 139.30253333333326,
    height: 14.666666666666666,
    text: 'segmentation tasks.\n',
  },
  {
    x: 96.0,
    y: 15296.019999999999,
    width: 125.8972,
    height: 46.66933333333327,
    text: 'Microsoft \nCognitive Toolkit \n(CNTK)\n',
  },
  {
    x: 269.756,
    y: 15296.988,
    width: 346.14506666666654,
    height: 14.666666666666666,
    text: 'CNTK is a deep learning framework developed by \n',
  },
  {
    x: 269.756,
    y: 15322.317333333332,
    width: 367.2621333333334,
    height: 14.666666666666666,
    text: 'Microsoft that offers scalability and performance for \n',
  },
  {
    x: 269.756,
    y: 15347.646666666667,
    width: 379.9209333333333,
    height: 14.666666666666666,
    text: 'training deep neural networks. It is used for various AI \n',
  },
  {
    x: 269.756,
    y: 15372.975999999999,
    width: 405.1622666666667,
    height: 14.666666666666666,
    text: 'applications including speech recognition, image analysis, \n',
  },
  {
    x: 269.756,
    y: 15398.305333333332,
    width: 69.75466666666667,
    height: 14.666666666666666,
    text: 'and more.\n',
  },
  {
    x: 96.0,
    y: 15440.985333333332,
    width: 115.6613333333333,
    height: 14.666666666666666,
    text: 'DeepLearning4j\n',
  },
  {
    x: 269.756,
    y: 15441.938666666665,
    width: 368.4076000000001,
    height: 14.666666666666666,
    text: ' An open-source, distributed deep-learning project in \n',
  },
  {
    x: 269.756,
    y: 15467.268,
    width: 390.20373333333333,
    height: 14.666666666666666,
    text: 'Java and Scala spearheaded by the people at Skymind. \n',
  },
  {
    x: 269.756,
    y: 15492.597333333333,
    width: 351.9809333333335,
    height: 14.666666666666666,
    text: 'DL4J includes implementations for neural network \n',
  },
  {
    x: 269.756,
    y: 15517.926666666666,
    width: 380.81559999999996,
    height: 14.666666666666666,
    text: 'concepts such as deep belief nets and stack denoising \n',
  },
  {
    x: 269.756,
    y: 15543.255999999998,
    width: 400.70213333333345,
    height: 14.666666666666666,
    text: 'autoencoders, and it leverages the JVM\u2019s multi-threading \n',
  },
  {
    x: 269.756,
    y: 15568.585333333333,
    width: 391.1262666666667,
    height: 14.666666666666666,
    text: 'capabilities for parallel processing to take advantage of \n',
  },
  {
    x: 269.756,
    y: 15593.914666666666,
    width: 122.86119999999997,
    height: 14.666666666666666,
    text: 'computing power.\n',
  },
  {
    x: 96.0,
    y: 15638.750666666667,
    width: 53.885333333333335,
    height: 14.666666666666666,
    text: 'Theano\n',
  },
  {
    x: 269.756,
    y: 15639.674666666666,
    width: 384.5702666666667,
    height: 14.666666666666666,
    text: 'Another powerful tool where you can use that to create \n',
  },
  {
    x: 269.756,
    y: 15665.004,
    width: 343.2249333333333,
    height: 14.666666666666666,
    text: 'all sorts of deep learning models. It allows you to \n',
  },
  {
    x: 269.756,
    y: 15690.333333333332,
    width: 384.92226666666676,
    height: 14.666666666666666,
    text: 'define, optimize, and efficiently evaluate mathematical \n',
  },
  {
    x: 269.756,
    y: 15715.662666666665,
    width: 399.1342666666668,
    height: 14.666666666666647,
    text: 'expressions involving multi-dimensional arrays. Theano is \n',
  },
  {
    x: 269.756,
    y: 15740.992,
    width: 388.3088000000001,
    height: 14.666666666666666,
    text: 'particularly known for its ability to leverage GPU power, \n',
  },
  {
    x: 269.756,
    y: 15766.321333333333,
    width: 285.4382666666666,
    height: 14.666666666666647,
    text: 'making computations significantly faster.\n',
  },
  {
    x: 744.0,
    y: 15853.186666666665,
    width: 14.239999999999933,
    height: 13.333333333333332,
    text: '15\n',
  },
  {
    x: 96.0,
    y: 16080.253333333334,
    width: 181.77413333333334,
    height: 18.666666666666664,
    text: 'Predictive Analytics\n',
  },
  {
    x: 96.0,
    y: 16136.873333333333,
    width: 83.18933333333332,
    height: 14.666666666666666,
    text: 'RapidMiner\n',
  },
  {
    x: 269.756,
    y: 16137.826666666668,
    width: 408.7262666666667,
    height: 14.666666666666666,
    text: 'RapidMiner is a predictive analytics platform that provides \n',
  },
  {
    x: 269.756,
    y: 16163.155999999999,
    width: 415.79560000000004,
    height: 14.666666666666666,
    text: 'machine learning algorithms and text analytics capabilities. \n',
  },
  {
    x: 269.756,
    y: 16188.485333333332,
    width: 402.63813333333337,
    height: 14.666666666666666,
    text: 'It\u2019s particularly useful for forecasting customer churn and \n',
  },
  {
    x: 269.756,
    y: 16213.814666666667,
    width: 309.2129333333333,
    height: 14.666666666666666,
    text: 'identifying key drivers of consumer behavior.\n',
  },
  {
    x: 96.0,
    y: 16257.829333333331,
    width: 75.9,
    height: 30.667999999999893,
    text: 'IBM SPSS \nModeler\n',
  },
  {
    x: 269.756,
    y: 16258.767999999998,
    width: 398.56080000000003,
    height: 14.66666666666659,
    text: 'A predictive data analytics tool that provides a variety of \n',
  },
  {
    x: 269.756,
    y: 16284.097333333333,
    width: 395.3796,
    height: 14.666666666666666,
    text: 'pre-built models. The tool allows users to run analyses as \n',
  },
  {
    x: 269.756,
    y: 16309.426666666666,
    width: 398.2396000000001,
    height: 14.666666666666666,
    text: 'well as design, build, and deploy predictive models within \n',
  },
  {
    x: 269.756,
    y: 16334.755999999998,
    width: 116.64253333333332,
    height: 14.666666666666666,
    text: 'the organization.\n',
  },
  {
    x: 96.0,
    y: 16377.566666666666,
    width: 54.04666666666666,
    height: 14.666666666666666,
    text: 'Orange\n',
  },
  {
    x: 269.756,
    y: 16378.519999999999,
    width: 390.09960000000007,
    height: 14.666666666666666,
    text: 'A component-based data mining software. It includes a \n',
  },
  {
    x: 269.756,
    y: 16403.84933333333,
    width: 383.5729333333334,
    height: 14.666666666666666,
    text: 'range of data visualization, exploration, preprocessing, \n',
  },
  {
    x: 269.756,
    y: 16429.178666666667,
    width: 177.50919999999996,
    height: 14.666666666666666,
    text: 'and modeling techniques.\n',
  },
  {
    x: 96.0,
    y: 16479.749333333333,
    width: 51.75866666666667,
    height: 14.666666666666666,
    text: 'Alteryx\n',
  },
  {
    x: 269.756,
    y: 16480.702666666664,
    width: 408.52093333333346,
    height: 14.666666666666666,
    text: 'Alteryx integrates predictive data analytics as well as data \n',
  },
  {
    x: 269.756,
    y: 16506.032,
    width: 389.5701333333333,
    height: 14.666666666666666,
    text: 'blending and data cleansing in a simple, drag-and-drop \n',
  },
  {
    x: 269.756,
    y: 16531.361333333334,
    width: 381.28493333333336,
    height: 14.666666666666666,
    text: 'designer. It\u2019s a tool designed to simplify the process of \n',
  },
  {
    x: 269.756,
    y: 16556.690666666665,
    width: 400.8649333333335,
    height: 14.666666666666666,
    text: 'preparing and blending data using a repeatable workflow.\n',
  },
  {
    x: 96.0,
    y: 16611.529333333332,
    width: 126.48386666666666,
    height: 30.668000000000006,
    text: 'KNIME Analytics \nPlatform\n',
  },
  {
    x: 269.756,
    y: 16612.482666666667,
    width: 352.2742666666666,
    height: 14.666666666666666,
    text: 'An open source software for creating data science \n',
  },
  {
    x: 269.756,
    y: 16637.811999999998,
    width: 375.6074666666667,
    height: 14.666666666666666,
    text: 'applications and services. It offers intuitive, graphical \n',
  },
  {
    x: 269.756,
    y: 16663.141333333333,
    width: 361.3529333333334,
    height: 14.666666666666666,
    text: 'and integrative data and information flows to serve \n',
  },
  {
    x: 269.756,
    y: 16688.470666666664,
    width: 137.48386666666661,
    height: 14.666666666666666,
    text: 'predictive analytics.\n',
  },
  {
    x: 744.0,
    y: 16913.186666666665,
    width: 14.0933333333334,
    height: 13.333333333333332,
    text: '16\n',
  },
  {
    x: 96.0,
    y: 17097.053333333333,
    width: 112.89599999999999,
    height: 18.666666666666664,
    text: 'Data Mining\n',
  },
  {
    x: 96.0,
    y: 17153.673333333332,
    width: 44.76266666666667,
    height: 14.666666666666666,
    text: 'WEKA\n',
  },
  {
    x: 269.756,
    y: 17154.626666666663,
    width: 427.7181333333336,
    height: 14.666666666666666,
    text: 'WEKA is a popular suite of machine learning software written \n',
  },
  {
    x: 269.756,
    y: 17179.956,
    width: 434.5249333333334,
    height: 14.666666666666666,
    text: 'in Java, developed at the University of Waikato, New Zealand. \n',
  },
  {
    x: 269.756,
    y: 17205.285333333333,
    width: 383.3382666666665,
    height: 14.666666666666666,
    text: 'It includes tools for data pre-processing, classification, \n',
  },
  {
    x: 269.756,
    y: 17230.614666666665,
    width: 393.42893333333336,
    height: 14.666666666666666,
    text: 'regression, clustering, association rules and visualization.\n',
  },
  {
    x: 96.0,
    y: 17274.62933333333,
    width: 113.8133333333333,
    height: 14.666666666666666,
    text: 'Apache Mahout\n',
  },
  {
    x: 269.756,
    y: 17275.568,
    width: 373.3488,
    height: 14.666666666666666,
    text: 'Apache\u2019s machine learning library includes clustering, \n',
  },
  {
    x: 269.756,
    y: 17300.89733333333,
    width: 358.34479999999996,
    height: 14.666666666666666,
    text: 'classification, and batch-based algorithms that are \n',
  },
  {
    x: 269.756,
    y: 17326.226666666666,
    width: 400.08906666666667,
    height: 14.666666666666666,
    text: 'primarily designed to be used with Hadoop. It\u2019s designed \n',
  },
  {
    x: 269.756,
    y: 17351.555999999997,
    width: 367.35159999999996,
    height: 14.666666666666666,
    text: 'to help data scientists quickly implement and deploy \n',
  },
  {
    x: 269.756,
    y: 17376.88533333333,
    width: 125.6772,
    height: 14.666666666666666,
    text: 'predictive models.\n',
  },
  {
    x: 96.0,
    y: 17418.153333333332,
    width: 124.9145333333333,
    height: 30.667999999999967,
    text: 'Microsoft \nAnalysis Services\n',
  },
  {
    x: 269.756,
    y: 17419.106666666667,
    width: 444.1594666666668,
    height: 14.666666666666666,
    text: 'This tool is ideal for data mining within a Microsoft environment \n',
  },
  {
    x: 269.756,
    y: 17444.435999999998,
    width: 435.74226666666675,
    height: 14.666666666666666,
    text: 'as it uses familiar languages such as Transact-SQL, and it also \n',
  },
  {
    x: 269.756,
    y: 17469.765333333333,
    width: 242.49573333333333,
    height: 14.666666666666666,
    text: 'integrates well with .NET and Excel.\n',
  },
  {
    x: 96.0,
    y: 17513.677333333333,
    width: 78.89200000000001,
    height: 14.666666666666666,
    text: 'DataRobot\n',
  },
  {
    x: 269.756,
    y: 17514.615999999998,
    width: 403.02093333333335,
    height: 14.666666666666666,
    text: 'This is an automated machine learning platform designed \n',
  },
  {
    x: 269.756,
    y: 17539.945333333333,
    width: 369.1541333333331,
    height: 14.666666666666666,
    text: 'for data scientists and business analysts. It supports \n',
  },
  {
    x: 269.756,
    y: 17565.274666666664,
    width: 365.53440000000006,
    height: 14.666666666666666,
    text: 'automated model building, ensemble models, model \n',
  },
  {
    x: 269.756,
    y: 17590.604,
    width: 383.14760000000024,
    height: 14.666666666666666,
    text: 'validation, model deployment and many more features.\n',
  },
  {
    x: 96.0,
    y: 17637.405333333332,
    width: 53.84133333333333,
    height: 14.666666666666666,
    text: 'Sisense\n',
  },
  {
    x: 269.756,
    y: 17638.343999999997,
    width: 385.91813333333334,
    height: 14.666666666666666,
    text: 'Sisense is a business analytics software that allows you \n',
  },
  {
    x: 269.756,
    y: 17663.673333333332,
    width: 399.95560000000006,
    height: 14.666666666666666,
    text: 'to clean, transform, and visualize your data. It has strong \n',
  },
  {
    x: 269.756,
    y: 17689.002666666667,
    width: 368.55280000000005,
    height: 14.666666666666666,
    text: 'data mining capabilities, supporting interactive data \n',
  },
  {
    x: 269.756,
    y: 17714.332,
    width: 380.0514666666666,
    height: 14.666666666666666,
    text: 'visualization, dynamic filtering, and predictive analysis.\n',
  },
  {
    x: 744.0,
    y: 17973.186666666665,
    width: 13.893333333333278,
    height: 13.333333333333332,
    text: '17\n',
  },
  {
    x: 94.24000000000001,
    y: 18241.053333333333,
    width: 288.8069333333334,
    height: 18.666666666666664,
    text: 'Business Intelligence (BI) Tools\n',
  },
  {
    x: 94.24000000000001,
    y: 18297.673333333332,
    width: 56.93599999999999,
    height: 14.666666666666666,
    text: 'Tableau\n',
  },
  {
    x: 267.996,
    y: 18298.626666666663,
    width: 395.76239999999996,
    height: 14.666666666666666,
    text: 'Tableau is an interactive BI and analytics tool that offers \n',
  },
  {
    x: 267.996,
    y: 18323.956,
    width: 420.41560000000015,
    height: 14.666666666666666,
    text: 'data visualization, reporting, and dashboarding capabilities. \n',
  },
  {
    x: 267.996,
    y: 18349.285333333333,
    width: 423.3914666666668,
    height: 14.666666666666666,
    text: 'It supports complex computation, data blending, dashboard \n',
  },
  {
    x: 267.996,
    y: 18374.614666666665,
    width: 220.62773333333325,
    height: 14.666666666666666,
    text: 'creation, and real-time analysis.\n',
  },
  {
    x: 94.24000000000001,
    y: 18418.62933333333,
    width: 66.42533333333331,
    height: 14.666666666666666,
    text: 'Power BI\n',
  },
  {
    x: 267.996,
    y: 18419.568,
    width: 384.46906666666666,
    height: 14.666666666666666,
    text: 'Developed by Microsoft, Power BI is a suite of business \n',
  },
  {
    x: 267.996,
    y: 18444.89733333333,
    width: 359.4448,
    height: 14.666666666666666,
    text: 'analytics tools that deliver insights throughout your \n',
  },
  {
    x: 267.996,
    y: 18470.226666666666,
    width: 404.6929333333335,
    height: 14.666666666666666,
    text: 'organization. It connects to a wide range of data sources, \n',
  },
  {
    x: 267.996,
    y: 18495.555999999997,
    width: 331.75559999999996,
    height: 14.666666666666666,
    text: 'simplifies data prep, and drives ad hoc analysis.\n',
  },
  {
    x: 94.24000000000001,
    y: 18538.324,
    width: 63.65333333333332,
    height: 14.666666666666666,
    text: 'QlikView\n',
  },
  {
    x: 267.996,
    y: 18539.291999999998,
    width: 370.32893333333334,
    height: 14.666666666666666,
    text: 'QlikView is a BI tool that enables users to create and \n',
  },
  {
    x: 267.996,
    y: 18564.621333333333,
    width: 395.7594666666667,
    height: 14.666666666666666,
    text: 'deploy interactive, user-driven dashboards and analytics \n',
  },
  {
    x: 267.996,
    y: 18589.950666666664,
    width: 396.80226666666664,
    height: 14.666666666666666,
    text: 'applications. It offers dynamic views of data that can be \n',
  },
  {
    x: 267.996,
    y: 18615.28,
    width: 265.44759999999997,
    height: 14.666666666666666,
    text: 'manipulated and navigated intuitively.\n',
  },
  {
    x: 94.24000000000001,
    y: 18654.806666666664,
    width: 43.13466666666666,
    height: 14.666666666666666,
    text: 'Domo\n',
  },
  {
    x: 267.996,
    y: 18655.76,
    width: 372.7782666666667,
    height: 14.666666666666666,
    text: 'Domo is a cloud-based business intelligence tool that \n',
  },
  {
    x: 267.996,
    y: 18681.08933333333,
    width: 369.88893333333345,
    height: 14.666666666666666,
    text: 'offers stunning data visualizations and an integrated \n',
  },
  {
    x: 267.996,
    y: 18706.418666666665,
    width: 407.03959999999995,
    height: 14.666666666666666,
    text: 'platform for all your data sources. It is mobile friendly and \n',
  },
  {
    x: 267.996,
    y: 18731.748,
    width: 246.9397333333332,
    height: 14.666666666666666,
    text: 'has excellent collaborative features.\n',
  },
  {
    x: 94.24000000000001,
    y: 18777.258666666665,
    width: 49.925333333333334,
    height: 14.666666666666666,
    text: 'Looker\n',
  },
  {
    x: 267.996,
    y: 18778.19733333333,
    width: 365.2395999999999,
    height: 14.666666666666666,
    text: 'Looker is a data-discovery application that provides \n',
  },
  {
    x: 267.996,
    y: 18803.526666666665,
    width: 359.66480000000007,
    height: 14.666666666666666,
    text: 'innovative data exploration functionalities. It offers \n',
  },
  {
    x: 267.996,
    y: 18828.856,
    width: 355.33813333333325,
    height: 14.666666666666666,
    text: 'intuitive dashboards, operational analytics, flexible \n',
  },
  {
    x: 267.996,
    y: 18854.18533333333,
    width: 372.39546666666666,
    height: 14.666666666666666,
    text: 'sharing capabilities, and advanced analytics features.\n',
  },
  {
    x: 744.0,
    y: 19033.186666666665,
    width: 14.386666666666617,
    height: 13.333333333333332,
    text: '18\n',
  },
  {
    x: 98.39999999999999,
    y: 19224.310266666667,
    width: 535.9573333333334,
    height: 108.5333333333333,
    text: 'Level Up Your Strategy \nwith HubSpot\u2019s AI Tools\n',
  },
  {
    x: 96.0,
    y: 19372.573333333334,
    width: 367.5615999999999,
    height: 18.666666666666664,
    text: 'Harness the power of AI to optimize your \n',
  },
  {
    x: 96.0,
    y: 19401.898666666664,
    width: 347.9224,
    height: 18.666666666666664,
    text: 'marketing, sales, and customer service \n',
  },
  {
    x: 96.0,
    y: 19431.224,
    width: 390.03440000000006,
    height: 18.666666666666664,
    text: 'processes. Try HubSpot\u2019s advanced AI suite \n',
  },
  {
    x: 96.0,
    y: 19460.549333333332,
    width: 414.86106666666666,
    height: 18.666666666666664,
    text: 'today and propel your business to new heights.\n',
  },
  {
    x: 168.3177333333333,
    y: 19549.96,
    width: 108.56346666666667,
    height: 18.666666666666664,
    text: 'Get Started\n',
  },
];

export const textBoxes1 = [
  {
    x: 289.4497190806959,
    y: 30.012607389474546,
    width: 63.238564970867245,
    height: 12.005042955789879,
    text: 'OBJECTIVE\n',
  },
  {
    x: 289.4497190806959,
    y: 67.20823214749694,
    width: 419.9364025935291,
    height: 12.005042955789879,
    text: 'Motivated and detail-oriented software engineering student seeking a \n',
  },
  {
    x: 289.4497190806959,
    y: 86.21621682749749,
    width: 473.4949009002929,
    height: 12.005042955789879,
    text: 'challenging internship position where I can apply my programming skills to real-\n',
  },
  {
    x: 289.4497190806959,
    y: 104.22378126118231,
    width: 448.94858973668795,
    height: 12.005042955789879,
    text: 'world projects and learn from experienced developers. Pro\u0000cient in various \n',
  },
  {
    x: 289.4497190806959,
    y: 123.23176594118286,
    width: 433.94228604195064,
    height: 12.005042955789879,
    text: 'programming languages and tools, with experience in web development. \n',
  },
  {
    x: 289.4497190806959,
    y: 162.06807990316307,
    width: 112.25915704034249,
    height: 12.005042955789879,
    text: 'WORK EXPERIENCE\n',
  },
  {
    x: 293.4514000659592,
    y: 198.26328441486945,
    width: 108.58961521610448,
    height: 12.005042955789879,
    text: 'WEB DEVELOPER\n',
  },
  {
    x: 293.4514000659592,
    y: 227.27547155802827,
    width: 73.0386813430255,
    height: 12.005042955789879,
    text: 'Sun Asterisk\n',
  },
  {
    x: 621.2453463978775,
    y: 197.2566897648732,
    width: 132.89582552059375,
    height: 13.276748971059835,
    text: '08/2023 - 10/2023\n',
  },
  {
    x: 25.010506157895534,
    y: 268.1126260126401,
    width: 187.6608313738208,
    height: 23.009665665263885,
    text: '\u0110inh Th\u00e0nh Long\n',
  },
  {
    x: 312.9595948691177,
    y: 272.2882082385598,
    width: 158.4806354261399,
    height: 13.005463202105602,
    text: 'manage posts using Django\n',
  },
  {
    x: 305.05002229668327,
    y: 291.29619291856045,
    width: 324.8510801227483,
    height: 13.011637605786138,
    text: '\u2022    Learn project management using Redmine and Github\n',
  },
  {
    x: 305.05002229668327,
    y: 254.28064380487513,
    width: 423.2866916187131,
    height: 13.005463202105602,
    text: '\u2022 Join the Scrum team and build a personal project about a CMS website to \n',
  },
  {
    x: 25.010506157895534,
    y: 348.14624571790574,
    width: 146.21742197852754,
    height: 12.005042955789879,
    text: 'PERSONAL INFORMATION\n',
  },
  {
    x: 29.012187143158815,
    y: 374.7824347760646,
    width: 99.20167162467683,
    height: 13.560696438810888,
    text: '\ue11b 0965310169\n',
  },
  {
    x: 29.012187143158815,
    y: 406.79588265817085,
    width: 191.796567942684,
    height: 13.56069643881104,
    text: '\u2709 dinhthanhlong0@gmail.com\n',
  },
  {
    x: 29.012187143158815,
    y: 437.3637232843507,
    width: 203.19735706969905,
    height: 14.451070458032063,
    text: '\uf05a https://github.com/LongDT20\n',
  },
  {
    x: 54.022693301054346,
    y: 456.3717079643514,
    width: 18.767883820884812,
    height: 12.005042955789804,
    text: '02 \n',
  },
  {
    x: 29.012187143158815,
    y: 483.82824162448907,
    width: 62.194125872961976,
    height: 13.560696438810888,
    text: '\uf3c5 H\u00e0 N\u1ed9i\n',
  },
  {
    x: 25.010506157895534,
    y: 531.223150793701,
    width: 39.37253958196003,
    height: 12.005042955789879,
    text: 'SKILLS\n',
  },
  {
    x: 289.4497190806959,
    y: 335.14078251580014,
    width: 68.18464276589346,
    height: 12.005042955789879,
    text: 'EDUCATION\n',
  },
  {
    x: 293.4514000659592,
    y: 371.3359870275067,
    width: 181.83638397036364,
    height: 12.005042955789879,
    text: 'INFORMATION TECHNOLOGY \n',
  },
  {
    x: 652.258374033668,
    y: 370.32939237751043,
    width: 101.73673652884106,
    height: 13.276748971059835,
    text: '2020 - Present\n',
  },
  {
    x: 293.4514000659592,
    y: 400.34817417066535,
    width: 268.216669718257,
    height: 12.005042955789879,
    text: 'Ha Noi University Of Science And Technology\n',
  },
  {
    x: 293.4514000659592,
    y: 428.3599410675083,
    width: 83.14692751180053,
    height: 12.005042955789804,
    text: 'CPA: 2.92/4.0\n',
  },
  {
    x: 289.4497190806959,
    y: 471.1979360147518,
    width: 72.24234718770965,
    height: 12.005042955789879,
    text: 'CERTIFICATE\n',
  },
  {
    x: 293.4514000659592,
    y: 506.39272028014244,
    width: 114.80822746720366,
    height: 12.005042955789804,
    text: '07/2022 JLPT N4 \n',
  },
  {
    x: 293.4514000659592,
    y: 543.4082693938278,
    width: 110.96661372135088,
    height: 12.005042955789804,
    text: '07/2023 JLPT N3\n',
  },
  {
    x: 29.012187143158815,
    y: 569.2391201537023,
    width: 149.27470615402785,
    height: 12.005042955789879,
    text: 'PROGRAMING LANGUAGE\n',
  },
  {
    x: 29.012187143158815,
    y: 590.4280209706715,
    width: 165.77363649551685,
    height: 12.005042955789804,
    text: 'C, Python, TypeScript, Java\n',
  },
  {
    x: 289.4497190806959,
    y: 586.2462643410712,
    width: 52.45003304540197,
    height: 12.005042955789879,
    text: 'PROJECT\n',
  },
  {
    x: 29.012187143158815,
    y: 627.4435700843568,
    width: 85.62796972266376,
    height: 12.005042955789804,
    text: 'FRAMEWORK\n',
  },
  {
    x: 29.012187143158815,
    y: 646.4515547643574,
    width: 128.14983187207145,
    height: 12.005042955789804,
    text: 'Django, Flask, NextJs\n',
  },
  {
    x: 29.012187143158815,
    y: 683.4671038780427,
    width: 66.73203211025054,
    height: 12.005042955789804,
    text: 'DATABASE\n',
  },
  {
    x: 29.012187143158815,
    y: 701.4746683117276,
    width: 127.54157636231142,
    height: 12.005042955789804,
    text: 'MySQL, PostgresSQL\n',
  },
  {
    x: 29.012187143158815,
    y: 738.4840430217325,
    width: 104.13974596049172,
    height: 31.01920203947073,
    text: 'OS\nUbuntu, Windows\n',
  },
  {
    x: 293.4514000659592,
    y: 622.4414688527777,
    width: 135.28883074978114,
    height: 12.005042955789804,
    text: 'MOVIE MANAGEMENT\n',
  },
  {
    x: 618.2440856589301,
    y: 621.4348742027814,
    width: 136.41730478762534,
    height: 13.27674897105976,
    text: '03/2024 - 06/2024\n',
  },
  {
    x: 293.4514000659592,
    y: 651.4536559959365,
    width: 303.8876540208939,
    height: 12.005042955789804,
    text: 'Link: https://github.com/LongDT2002/GR-project \n',
  },
  {
    x: 293.4514000659592,
    y: 685.4679443706743,
    width: 373.25279221944766,
    height: 12.005042955789804,
    text: 'Technologies Used: Python, TypeScript, Django, MySql, NextJs\n',
  },
  {
    x: 293.4514000659592,
    y: 711.4788707748858,
    width: 124.07211894808813,
    height: 12.005042955789804,
    text: 'Project information:\n',
  },
  {
    x: 305.05002229668327,
    y: 729.4802608048901,
    width: 445.06757944153526,
    height: 13.27674897105976,
    text: '\u2022 The website is a platform for managing movie information, providing a \n',
  },
  {
    x: 312.9595948691177,
    y: 748.7595312538448,
    width: 452.179947132288,
    height: 13.005463202105677,
    text: 'comprehensive source of information about \u0000lms, actors, directors, and \n',
  },
  {
    x: 312.9595948691177,
    y: 768.7679361801612,
    width: 303.8456363705486,
    height: 13.005463202105716,
    text: 'various other details related to the \u0000lm industry.\n',
  },
  {
    x: 305.05002229668327,
    y: 787.5046350912078,
    width: 454.07136165837767,
    height: 13.276748971059797,
    text: '\u2022 The website is not only a database of movies but also a place for users \n',
  },
  {
    x: 312.9595948691177,
    y: 807.7843257864783,
    width: 240.8191608526519,
    height: 13.005463202105677,
    text: 'to exchange opinions and review \u0000lms.\n',
  },
  {
    x: 305.05002229668327,
    y: 825.520604451209,
    width: 444.2955167913454,
    height: 13.005463202105677,
    text: "\u2022 The website integrates a movie recommendation system using 'Collaborative \n",
  },
  {
    x: 312.9595948691177,
    y: 844.5285891312096,
    width: 375.5791561246286,
    height: 13.005463202105677,
    text: "Filtering' and 'Content-based Filtering' machine learning algorithms.\n",
  },
  {
    x: 710.2983748842331,
    y: 1050.4412586316123,
    width: 63.04921261146258,
    height: 12.005042955789861,
    text: '\u00a9 topcv.vn\n',
  },
];

export const texBoxer2 = [
  {
    x: 107.35453333333334,
    y: 102.85940693333335,
    width: 598.7881472000004,
    height: 50.47746666666656,
    text: 'Trace-based Just-in-Time Type Specialization for Dynamic\nLanguages\n',
  },
  {
    x: 91.03320000000015,
    y: 182.31666586666657,
    width: 630.7545367999999,
    height: 84.24352186666677,
    text: 'Andreas Gal\u2217+, Brendan Eich\u2217, Mike Shaver\u2217, David Anderson\u2217, David Mandelin\u2217,\nMohammad R. Haghighat$, Blake Kaplan\u2217, Graydon Hoare\u2217, Boris Zbarsky\u2217, Jason Orendorff\u2217,\nJesse Ruderman\u2217, Edwin Smith#, Rick Reitmaier#, Michael Bebenita+, Mason Chang+#, Michael Franz+\nMozilla Corporation\u2217\n{gal,brendan,shaver,danderson,dmandelin,mrbkap,graydon,bz,jorendorff,jruderman}@mozilla.com\n',
  },
  {
    x: 315.8698666666668,
    y: 273.9759392000001,
    width: 181.75066666666663,
    height: 27.440115200000037,
    text: 'Adobe Corporation#\n{edwsmith,rreitmai}@adobe.com\n',
  },
  {
    x: 306.45533333333344,
    y: 309.2746058666668,
    width: 200.5797333333333,
    height: 61.853181866666844,
    text: 'Intel Corporation$\n{mohammad.r.haghighat}@intel.com\nUniversity of California, Irvine+\n{mbebenit,changm,franz}@uci.edu\n',
  },
  {
    x: 72.00000000000023,
    y: 447.24374680000034,
    width: 318.8093184000002,
    height: 205.42297639999998,
    text: 'Abstract\nDynamic languages such as JavaScript are more dif\ufb01cult to com-\npile than statically typed ones. Since no concrete type information\nis available, traditional compilers need to emit generic code that can\nhandle all possible type combinations at runtime. We present an al-\nternative compilation technique for dynamically-typed languages\nthat identi\ufb01es frequently executed loop traces at run-time and then\ngenerates machine code on the \ufb02y that is specialized for the ac-\ntual dynamic types occurring on each path through the loop. Our\nmethod provides cheap inter-procedural type specialization, and an\nelegant and ef\ufb01cient way of incrementally compiling lazily discov-\nered alternative paths through nested loops. We have implemented\na dynamic compiler for JavaScript based on our technique and we\nhave measured speedups of 10x and more for certain benchmark\nprograms.\n',
  },
  {
    x: 72.00000000000023,
    y: 661.2420202666669,
    width: 318.8078410666666,
    height: 25.51363626666671,
    text: 'Categories and Subject Descriptors D.3.4 [Programming Lan-\nguages]: Processors \u2014 Incremental compilers, code generation.\n',
  },
  {
    x: 72.00000000000018,
    y: 695.5222368000004,
    width: 318.8049824,
    height: 25.322486399999963,
    text: 'General Terms Design, Experimentation, Measurement, Perfor-\nmance.\n',
  },
  {
    x: 72.00000000000018,
    y: 729.611303466667,
    width: 47.342592,
    height: 11.95519999999999,
    text: 'Keywords\n',
  },
  {
    x: 131.29706666666686,
    y: 729.6949898666671,
    width: 228.90621440000012,
    height: 11.955200000000028,
    text: 'JavaScript, just-in-time compilation, trace trees.\n',
  },
  {
    x: 97.57076666666686,
    y: 757.6137468000003,
    width: 79.29860039999997,
    height: 14.611866666666666,
    text: 'Introduction\n',
  },
  {
    x: 72.0000000000002,
    y: 757.6137468000003,
    width: 318.8093184000003,
    height: 85.87137640000006,
    text: '1.\nDynamic languages such as JavaScript, Python, and Ruby, are pop-\nular since they are expressive, accessible to non-experts, and make\ndeployment as easy as distributing a source \ufb01le. They are used for\nsmall scripts as well as for complex applications. JavaScript, for\nexample, is the de facto standard for client-side web programming\n',
  },
  {
    x: 72.0000000000002,
    y: 889.0215210666671,
    width: 318.8049424000001,
    height: 75.71586666666667,
    text: 'Permission to make digital or hard copies of all or part of this work for personal or\nclassroom use is granted without fee provided that copies are not made or distributed\nfor pro\ufb01t or commercial advantage and that copies bear this notice and the full citation\non the \ufb01rst page. To copy otherwise, to republish, to post on servers or to redistribute\nto lists, requires prior speci\ufb01c permission and/or a fee.\nPLDI\u201909,\nJune 15\u201320, 2009, Dublin, Ireland.\nCopyright c(cid:13) 2009 ACM 978-1-60558-392-1/09/06. . . $5.00\n',
  },
  {
    x: 422.6849333333335,
    y: 449.42872320000043,
    width: 318.80931840000017,
    height: 65.08933333333334,
    text: 'and is used for the application logic of browser-based productivity\napplications such as Google Mail, Google Docs and Zimbra Col-\nlaboration Suite. In this domain, in order to provide a \ufb02uid user\nexperience and enable a new generation of applications, virtual ma-\nchines must provide a low startup time and high performance.\n',
  },
  {
    x: 422.6849333333335,
    y: 515.8463232000004,
    width: 318.80931840000017,
    height: 158.07399999999998,
    text: 'Compilers for statically typed languages rely on type informa-\ntion to generate ef\ufb01cient machine code. In a dynamically typed pro-\ngramming language such as JavaScript, the types of expressions\nmay vary at runtime. This means that the compiler can no longer\neasily transform operations into machine instructions that operate\non one speci\ufb01c type. Without exact type information, the compiler\nmust emit slower generalized machine code that can deal with all\npotential type combinations. While compile-time static type infer-\nence might be able to gather type information to generate opti-\nmized machine code, traditional static analysis is very expensive\nand hence not well suited for the highly interactive environment of\na web browser.\n',
  },
  {
    x: 422.6849333333335,
    y: 675.2485898666671,
    width: 318.80931840000017,
    height: 104.93986666666675,
    text: 'We present a trace-based compilation technique for dynamic\nlanguages that reconciles speed of compilation with excellent per-\nformance of the generated machine code. Our system uses a mixed-\nmode execution approach: the system starts running JavaScript in a\nfast-starting bytecode interpreter. As the program runs, the system\nidenti\ufb01es hot (frequently executed) bytecode sequences, records\nthem, and compiles them to fast native code. We call such a se-\nquence of instructions a trace.\n',
  },
  {
    x: 422.6849333333335,
    y: 781.5167232000005,
    width: 318.80931840000017,
    height: 131.50693333333342,
    text: 'Unlike method-based dynamic compilers, our dynamic com-\npiler operates at the granularity of individual loops. This design\nchoice is based on the expectation that programs spend most of\ntheir time in hot loops. Even in dynamically typed languages, we\nexpect hot loops to be mostly type-stable, meaning that the types of\nvalues are invariant. (12) For example, we would expect loop coun-\nters that start as integers to remain integers for all iterations. When\nboth of these expectations hold, a trace-based compiler can cover\nthe program execution with a small number of type-specialized, ef-\n\ufb01ciently compiled traces.\n',
  },
  {
    x: 422.68493333333356,
    y: 914.3519232000006,
    width: 318.8093184000002,
    height: 51.80573333333331,
    text: 'Each compiled trace covers one path through the program with\none mapping of values to types. When the VM executes a compiled\ntrace, it cannot guarantee that the same path will be followed\nor that the same types will occur in subsequent loop iterations.\n',
  },
  {
    x: 72.0,
    y: 1156.9789535999998,
    width: 318.80931840000017,
    height: 38.79723626666661,
    text: 'Hence, recording and compiling a trace speculates that the path and\ntyping will be exactly as they were during recording for subsequent\niterations of the loop.\n',
  },
  {
    x: 72.0,
    y: 1196.829486933333,
    width: 318.80931840000005,
    height: 78.64776959999986,
    text: 'Every compiled trace contains all the guards (checks) required\nto validate the speculation. If one of the guards fails (if control\n\ufb02ow is different, or a value of a different type is generated), the\ntrace exits. If an exit becomes hot, the VM can record a branch\ntrace starting at the exit to cover the new path. In this way, the VM\nrecords a trace tree covering all the hot paths through the loop.\n',
  },
  {
    x: 71.99999999999997,
    y: 1276.8056565333331,
    width: 318.8093184000002,
    height: 171.35746666666637,
    text: 'Nested loops can be dif\ufb01cult to optimize for tracing VMs. In\na na\u00a8\u0131ve implementation, inner loops would become hot \ufb01rst, and\nthe VM would start tracing there. When the inner loop exits, the\nVM would detect that a different branch was taken. The VM would\ntry to record a branch trace, and \ufb01nd that the trace reaches not the\ninner loop header, but the outer loop header. At this point, the VM\ncould continue tracing until it reaches the inner loop header again,\nthus tracing the outer loop inside a trace tree for the inner loop.\nBut this requires tracing a copy of the outer loop for every side exit\nand type combination in the inner loop. In essence, this is a form\nof unintended tail duplication, which can easily over\ufb02ow the code\ncache. Alternatively, the VM could simply stop tracing, and give up\non ever tracing outer loops.\n',
  },
  {
    x: 71.99999999999996,
    y: 1449.2164202666663,
    width: 318.81000106666664,
    height: 131.78176960000002,
    text: 'We solve the nested loop problem by recording nested trace\ntrees. Our system traces the inner loop exactly as the na\u00a8\u0131ve version.\nThe system stops extending the inner tree when it reaches an outer\nloop, but then it starts a new trace at the outer loop header. When\nthe outer loop reaches the inner loop header, the system tries to call\nthe trace tree for the inner loop. If the call succeeds, the VM records\nthe call to the inner tree as part of the outer trace and \ufb01nishes\nthe outer trace as normal. In this way, our system can trace any\nnumber of loops nested to any depth without causing excessive tail\nduplication.\n',
  },
  {
    x: 71.99999999999997,
    y: 1582.3265898666662,
    width: 318.8093184000003,
    height: 118.22333333333336,
    text: 'These techniques allow a VM to dynamically translate a pro-\ngram to nested, type-specialized trace trees. Because traces can\ncross function call boundaries, our techniques also achieve the ef-\nfects of inlining. Because traces have no internal control-\ufb02ow joins,\nthey can be optimized in linear time by a simple compiler (10).\nThus, our tracing VM ef\ufb01ciently performs the same kind of op-\ntimizations that would require interprocedural analysis in a static\noptimization setting. This makes tracing an attractive and effective\ntool to type specialize even complex function call-rich code.\n',
  },
  {
    x: 71.99999999999997,
    y: 1701.8781898666662,
    width: 318.80905173333343,
    height: 51.80586666666666,
    text: 'We implemented these techniques for an existing JavaScript in-\nterpreter, SpiderMonkey. We call the resulting tracing VM Trace-\nMonkey. TraceMonkey supports all the JavaScript features of Spi-\nderMonkey, with a 2x-20x speedup for traceable programs.\n',
  },
  {
    x: 87.94026666666667,
    y: 1755.0123231999996,
    width: 220.16696320000005,
    height: 11.955200000000028,
    text: 'This paper makes the following contributions:\n',
  },
  {
    x: 78.97373333333334,
    y: 1779.8610658666662,
    width: 311.82885440000007,
    height: 25.628590666666657,
    text: '\u2022 We explain an algorithm for dynamically forming trace trees to\ncover a program, representing nested loops as nested trace trees.\n',
  },
  {
    x: 78.97373333333334,
    y: 1811.7414658666662,
    width: 326.10336320000016,
    height: 12.345123999999979,
    text: '\u2022 We explain how to speculatively generate ef\ufb01cient type-specialized\n',
  },
  {
    x: 89.26853333333334,
    y: 1825.414856533333,
    width: 238.0399872000001,
    height: 11.95519999999999,
    text: 'code for traces from dynamic language programs.\n',
  },
  {
    x: 78.97373333333334,
    y: 1843.6218658666662,
    width: 311.82885440000024,
    height: 38.91219066666671,
    text: '\u2022 We validate our tracing techniques in an implementation based\non the SpiderMonkey JavaScript interpreter, achieving 2x-20x\nspeedups on many programs.\n',
  },
  {
    x: 72.0,
    y: 1895.8175231999996,
    width: 318.8093184000002,
    height: 131.50693333333334,
    text: 'The remainder of this paper is organized as follows. Section 3 is\na general overview of trace tree based compilation we use to cap-\nture and compile frequently executed code regions. In Section 4\nwe describe our approach of covering nested loops using a num-\nber of individual trace trees. In Section 5 we describe our trace-\ncompilation based speculative type specialization approach we use\nto generate ef\ufb01cient machine code from recorded bytecode traces.\nOur implementation of a dynamic type-specializing compiler for\nJavaScript is described in Section 6. Related work is discussed in\nSection 8. In Section 7 we evaluate our dynamic compiler based on\n',
  },
  {
    x: 460.3438133333333,
    y: 1181.5679210666663,
    width: 56.48832,
    height: 11.955199999999877,
    text: 'continue;\n',
  },
  {
    x: 447.79085333333325,
    y: 1168.2844543999995,
    width: 94.14720000000003,
    height: 11.955199999999877,
    text: 'if (!primes[i])\n',
  },
  {
    x: 422.6849333333333,
    y: 1155.000987733333,
    width: 207.1238399999999,
    height: 78.37279999999978,
    text: '1 for (var i = 2; i < 100; ++i) {\n2\n3\n4\n5\n6 }\n',
  },
  {
    x: 460.3438133333333,
    y: 1208.1349877333328,
    width: 112.97663999999993,
    height: 11.955199999999877,
    text: 'primes[k] = false;\n',
  },
  {
    x: 447.79085333333325,
    y: 1194.8515210666662,
    width: 225.95327999999986,
    height: 11.955199999999877,
    text: 'for (var k = i + i; i < 100; k += i)\n',
  },
  {
    x: 422.6849333333332,
    y: 1250.8602368,
    width: 318.80478506666674,
    height: 38.60595306666664,
    text: 'Figure 1. Sample program: sieve of Eratosthenes. primes is\ninitialized to an array of 100 false values on entry to this code\nsnippet.\n',
  },
  {
    x: 422.6849333333333,
    y: 1582.1194368,
    width: 318.8093184000002,
    height: 118.3070197333333,
    text: 'Figure 2. State machine describing the major activities of Trace-\nMonkey and the conditions that cause transitions to a new activ-\nity. In the dark box, TM executes JS as compiled traces. In the\nlight gray boxes, TM executes JS in the standard interpreter. White\nboxes are overhead. Thus, to maximize performance, we need to\nmaximize time spent in the darkest box and minimize time spent in\nthe white boxes. The best case is a loop where the types at the loop\nedge are the same as the types on entry\u2013then TM can stay in native\ncode until the loop is done.\n',
  },
  {
    x: 422.6849333333333,
    y: 1726.4653898666668,
    width: 318.80931840000005,
    height: 25.238666666666706,
    text: 'a set of industry benchmarks. The paper ends with conclusions in\nSection 9 and an outlook on future work is presented in Section 10.\n',
  },
  {
    x: 422.6849333333333,
    y: 1768.7674801333335,
    width: 318.8093184000004,
    height: 99.15484306666674,
    text: '2. Overview: Example Tracing Run\nThis section provides an overview of our system by describing\nhow TraceMonkey executes an example program. The example\nprogram, shown in Figure 1, computes the \ufb01rst 100 prime numbers\nwith nested loops. The narrative should be read along with Figure 2,\nwhich describes the activities TraceMonkey performs and when it\ntransitions between the loops.\n',
  },
  {
    x: 422.6849333333333,
    y: 1869.2505898666668,
    width: 318.8093184000004,
    height: 131.5069333333334,
    text: 'TraceMonkey always begins executing a program in the byte-\ncode interpreter. Every loop back edge is a potential trace point.\nWhen the interpreter crosses a loop edge, TraceMonkey invokes\nthe trace monitor, which may decide to record or execute a native\ntrace. At the start of execution, there are no compiled traces yet, so\nthe trace monitor counts the number of times each loop back edge is\nexecuted until a loop becomes hot, currently after 2 crossings. Note\nthat the way our loops are compiled, the loop edge is crossed before\nentering the loop, so the second crossing occurs immediately after\nthe \ufb01rst iteration.\n',
  },
  {
    x: 438.62519999999995,
    y: 2002.0857898666668,
    width: 302.86108160000003,
    height: 11.95519999999999,
    text: 'Here is the sequence of events broken down by outer loop\n',
  },
  {
    x: 422.6849333333333,
    y: 2015.3693898666666,
    width: 43.1702272,
    height: 11.955200000000008,
    text: 'iteration:\n',
  },
  {
    x: 72.0,
    y: 2215.0011210666667,
    width: 119.25311999999997,
    height: 11.955199999999877,
    text: 'v0 := ld state[748]\n',
  },
  {
    x: 109.65839999999999,
    y: 2228.2845877333334,
    width: 75.31776000000002,
    height: 11.955199999999877,
    text: 'st sp[0], v0\n',
  },
  {
    x: 71.99999999999999,
    y: 2241.5680543999997,
    width: 119.25311999999997,
    height: 25.23879999999993,
    text: 'v1 := ld state[764]\nv2 := i2f(v1)\n',
  },
  {
    x: 109.65839999999999,
    y: 2268.135121066666,
    width: 75.31776000000002,
    height: 25.23879999999993,
    text: 'st sp[8], v1\nst sp[16], 0\n',
  },
  {
    x: 71.99999999999999,
    y: 2294.702187733333,
    width: 112.97663999999997,
    height: 51.80573333333314,
    text: 'v3 := ld v0[4]\nv4 := and v3, -4\nv5 := eq v4, Array\nxf v5\n',
  },
  {
    x: 222.63504,
    y: 2215.0011210666667,
    width: 294.99503999999956,
    height: 131.50679999999966,
    text: '// load primes from the trace activation record\n// store primes to interpreter stack\n// load k from the trace activation record\n// convert k from int to double\n// store k to interpreter stack\n// store false to interpreter stack\n// load class word for primes\n// mask out object class tag for primes\n// test whether primes is an array\n// side exit if v5 is false\n',
  },
  {
    x: 71.99999999999999,
    y: 2347.8363210666666,
    width: 207.12383999999986,
    height: 25.23866666666648,
    text: 'v6 := js_Array_set(v0, v2, false)\nv7 := eq v6, 0\n',
  },
  {
    x: 291.67679999999984,
    y: 2347.8363210666666,
    width: 232.22975999999974,
    height: 11.955199999999877,
    text: '// call function to set array element\n',
  },
  {
    x: 222.63504,
    y: 2361.119787733333,
    width: 269.8886399999996,
    height: 25.23866666666648,
    text: '// test return value from call\n// side exit if js_Array_set returns false.\n',
  },
  {
    x: 109.65839999999999,
    y: 2374.4032543999997,
    width: 31.382399999999997,
    height: 11.955199999999877,
    text: 'xt v7\n',
  },
  {
    x: 72.0,
    y: 2405.505303466666,
    width: 669.4945557333335,
    height: 51.96115093333325,
    text: 'Figure 3. LIR snippet for sample program. This is the LIR recorded for line 5 of the sample program in Figure 1. The LIR encodes\nthe semantics in SSA form using temporary variables. The LIR also encodes all the stores that the interpreter would do to its data stack.\nSometimes these stores can be optimized away as the stack locations are live only on exits to the interpreter. Finally, the LIR records guards\nand side exits to verify the assumptions made in this recording: that primes is an array and that the call to set its element succeeds.\n',
  },
  {
    x: 71.99999999999991,
    y: 2480.3804544,
    width: 106.70015999999998,
    height: 290.9091999999999,
    text: 'mov edx, ebx(748)\nmov edi(0), edx\nmov esi, ebx(764)\nmov edi(8), esi\nmov edi(16), 0\nmov eax, edx(4)\nand eax, -4\ncmp eax, Array\njne side_exit_1\nsub esp, 8\npush false\npush esi\ncall js_Array_set\nadd esp, 8\nmov ecx, ebx\ntest eax, eax\nje side_exit_2\n...\nside_exit_1:\nmov ecx, ebp(-4)\nmov esp, ebp\njmp epilog\n',
  },
  {
    x: 216.35903999999988,
    y: 2480.3804544,
    width: 294.9945599999997,
    height: 224.4915999999999,
    text: '// load primes from the trace activation record\n// (*) store primes to interpreter stack\n// load k from the trace activation record\n// (*) store k to interpreter stack\n// (*) store false to interpreter stack\n// (*) load object class word for primes\n// (*) mask out object class tag for primes\n// (*) test whether primes is an array\n// (*) side exit if primes is not an array\n// bump stack for call alignment convention\n// push last argument for call\n// push first argument for call\n// call function to set array element\n// clean up extra stack space\n// (*) created by register allocator\n// (*) test return value of js_Array_set\n// (*) side exit if call failed\n',
  },
  {
    x: 216.35903999999988,
    y: 2732.767387733333,
    width: 150.63551999999987,
    height: 38.52226666666668,
    text: '// restore ecx\n// restore esp\n// jump to ret statement\n',
  },
  {
    x: 71.99999999999996,
    y: 2790.436370133333,
    width: 669.4911999999996,
    height: 51.88955306666662,
    text: 'Figure 4. x86 snippet for sample program. This is the x86 code compiled from the LIR snippet in Figure 3. Most LIR instructions compile\nto a single x86 instruction. Instructions marked with (*) would be omitted by an idealized compiler that knew that none of the side exits\nwould ever be taken. The 17 instructions generated by the compiler compare favorably with the 100+ instructions that the interpreter would\nexecute for the same code snippet, including 4 indirect jumps.\n',
  },
  {
    x: 71.99999999999994,
    y: 2870.0690367999996,
    width: 318.80931840000017,
    height: 131.59061973333343,
    text: 'i=2. This is the \ufb01rst iteration of the outer loop. The loop on\nlines 4-5 becomes hot on its second iteration, so TraceMonkey en-\nters recording mode on line 4. In recording mode, TraceMonkey\nrecords the code along the trace in a low-level compiler intermedi-\nate representation we call LIR. The LIR trace encodes all the oper-\nations performed and the types of all operands. The LIR trace also\nencodes guards, which are checks that verify that the control \ufb02ow\nand types are identical to those observed during trace recording.\nThus, on later executions, if and only if all guards are passed, the\ntrace has the required program semantics.\n',
  },
  {
    x: 71.99999999999994,
    y: 3002.9879232000003,
    width: 318.80931840000017,
    height: 38.522266666666646,
    text: 'TraceMonkey stops recording when execution returns to the\nloop header or exits the loop. In this case, execution returns to the\nloop header on line 4.\n',
  },
  {
    x: 71.99999999999994,
    y: 3042.838456533333,
    width: 318.80931840000005,
    height: 38.52226666666667,
    text: 'After recording is \ufb01nished, TraceMonkey compiles the trace to\nnative code using the recorded type information for optimization.\nThe result is a native code fragment that can be entered if the\n',
  },
  {
    x: 422.684933333333,
    y: 2870.1527232,
    width: 318.8093184000005,
    height: 65.08933333333337,
    text: 'interpreter PC and the types of values match those observed when\ntrace recording was started. The \ufb01rst trace in our example, T45,\ncovers lines 4 and 5. This trace can be entered if the PC is at line 4,\ni and k are integers, and primes is an object. After compiling T45,\nTraceMonkey returns to the interpreter and loops back to line 1.\n',
  },
  {
    x: 422.684933333333,
    y: 2936.4866368000003,
    width: 318.8093184000002,
    height: 145.16623573333334,
    text: 'i=3. Now the loop header at line 1 has become hot, so Trace-\nMonkey starts recording. When recording reaches line 4, Trace-\nMonkey observes that it has reached an inner loop header that al-\nready has a compiled trace, so TraceMonkey attempts to nest the\ninner loop inside the current trace. The \ufb01rst step is to call the inner\ntrace as a subroutine. This executes the loop on line 4 to completion\nand then returns to the recorder. TraceMonkey veri\ufb01es that the call\nwas successful and then records the call to the inner trace as part of\nthe current trace. Recording continues until execution reaches line\n1, and at which point TraceMonkey \ufb01nishes and compiles a trace\nfor the outer loop, T16.\n',
  },
  {
    x: 71.99999999999996,
    y: 3276.9909087999995,
    width: 318.8097557333333,
    height: 65.35234773333332,
    text: 'i=4. On this iteration, TraceMonkey calls T16. Because i=4, the\nif statement on line 2 is taken. This branch was not taken in the\noriginal trace, so this causes T16 to fail a guard and take a side exit.\nThe exit is not yet hot, so TraceMonkey returns to the interpreter,\nwhich executes the continue statement.\n',
  },
  {
    x: 71.99999999999996,
    y: 3343.4085087999997,
    width: 318.80439146666674,
    height: 38.785281066666656,
    text: 'i=5. TraceMonkey calls T16, which in turn calls the nested trace\nT45. T16 loops back to its own header, starting the next iteration\nwithout ever returning to the monitor.\n',
  },
  {
    x: 71.9999999999998,
    y: 3383.4383701333327,
    width: 318.8099136000002,
    height: 65.46516906666677,
    text: 'i=6. On this iteration, the side exit on line 2 is taken again. This\ntime, the side exit becomes hot, so a trace T23,1 is recorded that\ncovers line 3 and returns to the loop header. Thus, the end of T23,1\njumps directly to the start of T16. The side exit is patched so that\non future iterations, it jumps directly to T23,1.\n',
  },
  {
    x: 71.99999999999987,
    y: 3449.9396565333327,
    width: 318.80931840000005,
    height: 38.52226666666653,
    text: 'At this point, TraceMonkey has compiled enough traces to cover\nthe entire nested loop structure, so the rest of the program runs\nentirely as native code.\n',
  },
  {
    x: 71.99999999999987,
    y: 3510.452813466666,
    width: 318.8093184000001,
    height: 72.58777640000017,
    text: '3. Trace Trees\nIn this section, we describe traces, trace trees, and how they are\nformed at run time. Although our techniques apply to any dynamic\nlanguage interpreter, we will describe them assuming a bytecode\ninterpreter to keep the exposition simple.\n',
  },
  {
    x: 71.99999999999987,
    y: 3598.6314367999994,
    width: 60.54113280000002,
    height: 11.955199999999952,
    text: '3.1 Traces\n',
  },
  {
    x: 71.99999999999984,
    y: 3617.0370869333333,
    width: 318.8107573333333,
    height: 52.08070293333336,
    text: 'A trace is simply a program path, which may cross function call\nboundaries. TraceMonkey focuses on loop traces, that originate at\na loop edge and represent a single iteration through the associated\nloop.\n',
  },
  {
    x: 71.99999999999986,
    y: 3670.446189866666,
    width: 318.8093184000003,
    height: 78.37280000000001,
    text: 'Similar to an extended basic block, a trace is only entered at\nthe top, but may have many exits. In contrast to an extended basic\nblock, a trace can contain join nodes. Since a trace always only\nfollows one single path through the original program, however, join\nnodes are not recognizable as such in a trace and have a single\npredecessor node like regular nodes.\n',
  },
  {
    x: 71.99999999999983,
    y: 3749.872286933333,
    width: 318.81091626666677,
    height: 105.21483626666668,
    text: 'A typed trace is a trace annotated with a type for every variable\n(including temporaries) on the trace. A typed trace also has an entry\ntype map giving the required types for variables used on the trace\nbefore they are de\ufb01ned. For example, a trace could have a type map\n(x: int, b: boolean), meaning that the trace may be entered\nonly if the value of the variable x is of type int and the value of b\nis of type boolean. The entry type map is much like the signature\nof a function.\n',
  },
  {
    x: 71.99999999999986,
    y: 3856.4153898666664,
    width: 318.8093184000002,
    height: 51.805733333333364,
    text: 'In this paper, we only discuss typed loop traces, and we will\nrefer to them simply as \u201ctraces\u201d. The key property of typed loop\ntraces is that they can be compiled to ef\ufb01cient machine code using\nthe same techniques used for typed languages.\n',
  },
  {
    x: 71.99999999999989,
    y: 3909.2745535999993,
    width: 318.8093184000003,
    height: 158.3488362666668,
    text: 'In TraceMonkey, traces are recorded in trace-\ufb02avored SSA LIR\n(low-level intermediate representation). In trace-\ufb02avored SSA (or\nTSSA), phi nodes appear only at the entry point, which is reached\nboth on entry and via loop edges. The important LIR primitives\nare constant values, memory loads and stores (by address and\noffset), integer operators, \ufb02oating-point operators, function calls,\nand conditional exits. Type conversions, such as integer to double,\nare represented by function calls. This makes the LIR used by\nTraceMonkey independent of the concrete type system and type\nconversion rules of the source language. The LIR operations are\ngeneric enough that the backend compiler is language independent.\nFigure 3 shows an example LIR trace.\n',
  },
  {
    x: 71.99999999999989,
    y: 4068.9517898666663,
    width: 318.80931840000017,
    height: 78.37279999999996,
    text: 'Bytecode interpreters typically represent values in a various\ncomplex data structures (e.g., hash tables) in a boxed format (i.e.,\nwith attached type tag bits). Since a trace is intended to represent\nef\ufb01cient code that eliminates all that complexity, our traces oper-\nate on unboxed values in simple variables and arrays as much as\npossible.\n',
  },
  {
    x: 422.6849333333333,
    y: 3277.2539232,
    width: 318.8093184000002,
    height: 118.22333333333304,
    text: 'A trace records all its intermediate values in a small activation\nrecord area. To make variable accesses fast on trace, the trace also\nimports local and global variables by unboxing them and copying\nthem to its activation record. Thus, the trace can read and write\nthese variables with simple loads and stores from a native activation\nrecording, independently of the boxing mechanism used by the\ninterpreter. When the trace exits, the VM boxes the values from\nthis native storage location and copies them back to the interpreter\nstructures.\n',
  },
  {
    x: 422.6849333333333,
    y: 3396.8056565333327,
    width: 318.80931840000005,
    height: 78.37279999999978,
    text: 'For every control-\ufb02ow branch in the source program,\nthe\nrecorder generates conditional exit LIR instructions. These instruc-\ntions exit from the trace if required control \ufb02ow is different from\nwhat it was at trace recording, ensuring that the trace instructions\nare run only if they are supposed to. We call these instructions\nguard instructions.\n',
  },
  {
    x: 422.6849333333332,
    y: 3476.5067232,
    width: 318.80931840000017,
    height: 38.52226666666653,
    text: 'Most of our traces represent loops and end with the special loop\nLIR instruction. This is just an unconditional branch to the top of\nthe trace. Such traces return only via guards.\n',
  },
  {
    x: 422.6849333333332,
    y: 3516.357256533333,
    width: 318.80931840000017,
    height: 78.37279999999994,
    text: 'Now, we describe the key optimizations that are performed as\npart of recording LIR. All of these optimizations reduce complex\ndynamic language constructs to simple typed constructs by spe-\ncializing for the current trace. Each optimization requires guard in-\nstructions to verify their assumptions about the state and exit the\ntrace if necessary.\n',
  },
  {
    x: 422.6849333333332,
    y: 3595.974770133333,
    width: 318.80931840000017,
    height: 118.3070197333333,
    text: 'Type specialization.\nAll LIR primitives apply to operands of speci\ufb01c types. Thus,\nLIR traces are necessarily type-specialized, and a compiler can\neasily produce a translation that requires no type dispatches. A\ntypical bytecode interpreter carries tag bits along with each value,\nand to perform any operation, must check the tag bits, dynamically\ndispatch, mask out the tag bits to recover the untagged value,\nperform the operation, and then reapply tags. LIR omits everything\nexcept the operation itself.\n',
  },
  {
    x: 422.6849333333332,
    y: 3715.6100565333327,
    width: 318.80931840000017,
    height: 144.7904,
    text: 'A potential problem is that some operations can produce values\nof unpredictable types. For example, reading a property from an\nobject could yield a value of any type, not necessarily the type\nobserved during recording. The recorder emits guard instructions\nthat conditionally exit if the operation yields a value of a different\ntype from that seen during recording. These guard instructions\nguarantee that as long as execution is on trace, the types of values\nmatch those of the typed trace. When the VM observes a side exit\nalong such a type guard, a new typed trace is recorded originating\nat the side exit location, capturing the new type of the operation in\nquestion.\n',
  },
  {
    x: 422.6849333333331,
    y: 3861.6451701333326,
    width: 318.81085546666657,
    height: 264.42568640000013,
    text: 'Representation specialization: objects. In JavaScript, name\nlookup semantics are complex and potentially expensive because\nthey include features like object inheritance and eval. To evaluate\nan object property read expression like o.x, the interpreter must\nsearch the property map of o and all of its prototypes and parents.\nProperty maps can be implemented with different data structures\n(e.g., per-object hash tables or shared hash tables), so the search\nprocess also must dispatch on the representation of each object\nfound during search. TraceMonkey can simply observe the result of\nthe search process and record the simplest possible LIR to access\nthe property value. For example, the search might \ufb01nds the value of\no.x in the prototype of o, which uses a shared hash-table represen-\ntation that places x in slot 2 of a property vector. Then the recorded\ncan generate LIR that reads o.x with just two or three loads: one to\nget the prototype, possibly one to get the property value vector, and\none more to get slot 2 from the vector. This is a vast simpli\ufb01cation\nand speedup compared to the original interpreter code. Inheritance\nrelationships and object representations can change during execu-\ntion, so the simpli\ufb01ed code requires guard instructions that ensure\nthe object representation is the same. In TraceMonkey, objects\u2019 rep-\n',
  },
  {
    x: 72.0,
    y: 4336.9789536,
    width: 318.8045333333333,
    height: 25.513769600000007,
    text: 'resentations are assigned an integer key called the object shape.\nThus, the guard is a simple equality check on the object shape.\n',
  },
  {
    x: 72.0,
    y: 4363.737303466666,
    width: 318.8093184000002,
    height: 105.50661973333322,
    text: 'Representation specialization: numbers. JavaScript has no\ninteger type, only a Number type that is the set of 64-bit IEEE-\n754 \ufb02oating-pointer numbers (\u201cdoubles\u201d). But many JavaScript\noperators, in particular array accesses and bitwise operators, really\noperate on integers, so they \ufb01rst convert the number to an integer,\nand then convert any integer result back to a double.1 Clearly, a\nJavaScript VM that wants to be fast must \ufb01nd a way to operate on\nintegers directly and avoid these conversions.\n',
  },
  {
    x: 72.0,
    y: 4470.572189866666,
    width: 318.8093184000003,
    height: 91.65639999999985,
    text: 'In TraceMonkey, we support two representations for numbers:\nintegers and doubles. The interpreter uses integer representations\nas much as it can, switching for results that can only be represented\nas doubles. When a trace is started, some values may be imported\nand represented as integers. Some operations on integers require\nguards. For example, adding two integers can produce a value too\nlarge for the integer representation.\n',
  },
  {
    x: 72.00000000000001,
    y: 4563.473170133333,
    width: 318.8093184000002,
    height: 171.44115306666663,
    text: 'Function inlining. LIR traces can cross function boundaries\nin either direction, achieving function inlining. Move instructions\nneed to be recorded for function entry and exit to copy arguments\nin and return values out. These move statements are then optimized\naway by the compiler using copy propagation. In order to be able\nto return to the interpreter, the trace must also generate LIR to\nrecord that a call frame has been entered and exited. The frame\nentry and exit LIR saves just enough information to allow the\nintepreter call stack to be restored later and is much simpler than\nthe interpreter\u2019s standard call code. If the function being entered\nis not constant (which in JavaScript includes any call by function\nname), the recorder must also emit LIR to guard that the function\nis the same.\n',
  },
  {
    x: 72.00000000000003,
    y: 4736.158903466666,
    width: 318.8093184000001,
    height: 105.02355306666664,
    text: 'Guards and side exits. Each optimization described above\nrequires one or more guards to verify the assumptions made in\ndoing the optimization. A guard is just a group of LIR instructions\nthat performs a test and conditional exit. The exit branches to a\nside exit, a small off-trace piece of LIR that returns a pointer to\na structure that describes the reason for the exit along with the\ninterpreter PC at the exit point and any other data needed to restore\nthe interpreter\u2019s state structures.\n',
  },
  {
    x: 72.00000000000003,
    y: 4842.4270368,
    width: 318.8093184000001,
    height: 118.30715306666661,
    text: 'Aborts. Some constructs are dif\ufb01cult to record in LIR traces.\nFor example, eval or calls to external functions can change the\nprogram state in unpredictable ways, making it dif\ufb01cult for the\ntracer to know the current type map in order to continue tracing.\nA tracing implementation can also have any number of other limi-\ntations, e.g.,a small-memory device may limit the length of traces.\nWhen any situation occurs that prevents the implementation from\ncontinuing trace recording, the implementation aborts trace record-\ning and returns to the trace monitor.\n',
  },
  {
    x: 72.00000000000003,
    y: 4981.297303466666,
    width: 86.32849920000001,
    height: 11.95519999999999,
    text: '3.2 Trace Trees\n',
  },
  {
    x: 72.00000000000003,
    y: 4999.977923199999,
    width: 318.80931840000017,
    height: 104.93973333333341,
    text: 'Especially simple loops, namely those where control \ufb02ow, value\ntypes, value representations, and inlined functions are all invariant,\ncan be represented by a single trace. But most loops have at least\nsome variation, and so the program will take side exits from the\nmain trace. When a side exit becomes hot, TraceMonkey starts a\nnew branch trace from that point and patches the side exit to jump\ndirectly to that trace. In this way, a single trace expands on demand\nto a single-entry, multiple-exit trace tree.\n',
  },
  {
    x: 72.00000000000003,
    y: 5106.246056533333,
    width: 318.80931840000005,
    height: 38.52226666666667,
    text: 'This section explains how trace trees are formed during execu-\ntion. The goal is to form trace trees during execution that cover all\nthe hot paths of the program.\n',
  },
  {
    x: 72.0,
    y: 5170.8328821333325,
    width: 318.8093384000002,
    height: 36.2047733333333,
    text: '1 Arrays are actually worse than this: if the index value is a number, it must\nbe converted from a double to a string for the property access operator, and\nthen to an integer internally to the array implementation.\n',
  },
  {
    x: 422.68493333333333,
    y: 4337.1702368,
    width: 318.8093184000003,
    height: 131.5906197333332,
    text: 'Starting a tree. Tree trees always start at loop headers, because\nthey are a natural place to look for hot paths. In TraceMonkey, loop\nheaders are easy to detect\u2013the bytecode compiler ensures that a\nbytecode is a loop header iff it is the target of a backward branch.\nTraceMonkey starts a tree when a given loop header has been exe-\ncuted a certain number of times (2 in the current implementation).\nStarting a tree just means starting recording a trace for the current\npoint and type map and marking the trace as the root of a tree. Each\ntree is associated with a loop header and type map, so there may be\nseveral trees for a given loop header.\n',
  },
  {
    x: 422.68493333333333,
    y: 4470.005436799999,
    width: 318.8093184000003,
    height: 105.02355306666655,
    text: 'Closing the loop. Trace recording can end in several ways.\nIdeally, the trace reaches the loop header where it started with\nthe same type map as on entry. This is called a type-stable loop\niteration. In this case, the end of the trace can jump right to the\nbeginning, as all the value representations are exactly as needed to\nenter the trace. The jump can even skip the usual code that would\ncopy out the state at the end of the trace and copy it back in to the\ntrace activation record to enter a trace.\n',
  },
  {
    x: 422.68493333333345,
    y: 4576.357389866666,
    width: 318.8093184000002,
    height: 171.35733333333314,
    text: 'In certain cases the trace might reach the loop header with a\ndifferent type map. This scenario is sometime observed for the \ufb01rst\niteration of a loop. Some variables inside the loop might initially be\nunde\ufb01ned, before they are set to a concrete type during the \ufb01rst loop\niteration. When recording such an iteration, the recorder cannot\nlink the trace back to its own loop header since it is type-unstable.\nInstead, the iteration is terminated with a side exit that will always\nfail and return to the interpreter. At the same time a new trace is\nrecorded with the new type map. Every time an additional type-\nunstable trace is added to a region, its exit type map is compared to\nthe entry map of all existing traces in case they complement each\nother. With this approach we are able to cover type-unstable loop\niterations as long they eventually form a stable equilibrium.\n',
  },
  {
    x: 422.68493333333345,
    y: 4749.043123199999,
    width: 318.8093184000002,
    height: 51.805733333333364,
    text: 'Finally, the trace might exit the loop before reaching the loop\nheader, for example because execution reaches a break or return\nstatement. In this case, the VM simply ends the trace with an exit\nto the trace monitor.\n',
  },
  {
    x: 422.68493333333356,
    y: 4802.177123199999,
    width: 318.8093184000002,
    height: 197.9245333333334,
    text: 'As mentioned previously, we may speculatively chose to rep-\nresent certain Number-typed values as integers on trace. We do so\nwhen we observe that Number-typed variables contain an integer\nvalue at trace entry. If during trace recording the variable is unex-\npectedly assigned a non-integer value, we have to widen the type\nof the variable to a double. As a result, the recorded trace becomes\ninherently type-unstable since it starts with an integer value but\nends with a double value. This represents a mis-speculation, since\nat trace entry we specialized the Number-typed value to an integer,\nassuming that at the loop edge we would again \ufb01nd an integer value\nin the variable, allowing us to close the loop. To avoid future spec-\nulative failures involving this variable, and to obtain a type-stable\ntrace we note the fact that the variable in question as been observed\nto sometimes hold non-integer values in an advisory data structure\nwhich we call the \u201coracle\u201d.\n',
  },
  {
    x: 422.68493333333356,
    y: 5001.429923199999,
    width: 318.8093184000002,
    height: 104.93986666666675,
    text: 'When compiling loops, we consult the oracle before specializ-\ning values to integers. Speculation towards integers is performed\nonly if no adverse information is known to the oracle about that\nparticular variable. Whenever we accidentally compile a loop that\nis type-unstable due to mis-speculation of a Number-typed vari-\nable, we immediately trigger the recording of a new trace, which\nbased on the now updated oracle information will start with a dou-\nble value and thus become type stable.\n',
  },
  {
    x: 422.68493333333356,
    y: 5107.614503466666,
    width: 318.8093184000004,
    height: 91.73995306666663,
    text: 'Extending a tree. Side exits lead to different paths through\nthe loop, or paths with different types or representations. Thus, to\ncompletely cover the loop, the VM must record traces starting at all\nside exits. These traces are recorded much like root traces: there is\na counter for each side exit, and when the counter reaches a hotness\nthreshold, recording starts. Recording stops exactly as for the root\ntrace, using the loop header of the root trace as the target to reach.\n',
  },
  {
    x: 72.0,
    y: 5397.2539232,
    width: 318.8093184000002,
    height: 65.08933333333319,
    text: 'Our implementation does not extend at all side exits. It extends\nonly if the side exit is for a control-\ufb02ow branch, and only if the side\nexit does not leave the loop. In particular we do not want to extend\na trace tree along a path that leads to an outer loop, because we\nwant to cover such paths in an outer tree through tree nesting.\n',
  },
  {
    x: 71.99999999999996,
    y: 5473.683303466667,
    width: 87.3566464,
    height: 11.955200000000028,
    text: '3.3 Blacklisting\n',
  },
  {
    x: 71.99999999999996,
    y: 5492.3639232,
    width: 318.80931840000017,
    height: 118.22333333333304,
    text: 'Sometimes, a program follows a path that cannot be compiled\ninto a trace, usually because of limitations in the implementation.\nTraceMonkey does not currently support recording throwing and\ncatching of arbitrary exceptions. This design trade off was chosen,\nbecause exceptions are usually rare in JavaScript. However, if a\nprogram opts to use exceptions intensively, we would suddenly\nincur a punishing runtime overhead if we repeatedly try to record\na trace for this path and repeatedly fail to do so, since we abort\ntracing every time we observe an exception being thrown.\n',
  },
  {
    x: 71.99999999999996,
    y: 5611.915656533333,
    width: 318.8093184000003,
    height: 211.20799999999986,
    text: 'As a result, if a hot loop contains traces that always fail, the VM\ncould potentially run much more slowly than the base interpreter:\nthe VM repeatedly spends time trying to record traces, but is never\nable to run any. To avoid this problem, whenever the VM is about\nto start tracing, it must try to predict whether it will \ufb01nish the trace.\nOur prediction algorithm is based on blacklisting traces that\nhave been tried and failed. When the VM fails to \ufb01nish a trace start-\ning at a given point, the VM records that a failure has occurred. The\nVM also sets a counter so that it will not try to record a trace starting\nat that point until it is passed a few more times (32 in our imple-\nmentation). This backoff counter gives temporary conditions that\nprevent tracing a chance to end. For example, a loop may behave\ndifferently during startup than during its steady-state execution. Af-\nter a given number of failures (2 in our implementation), the VM\nmarks the fragment as blacklisted, which means the VM will never\nagain start recording at that point.\n',
  },
  {
    x: 71.99999999999997,
    y: 5824.451923199999,
    width: 318.80931840000017,
    height: 118.22333333333336,
    text: 'After implementing this basic strategy, we observed that for\nsmall loops that get blacklisted, the system can spend a noticeable\namount of time just \ufb01nding the loop fragment and determining that\nit has been blacklisted. We now avoid that problem by patching the\nbytecode. We de\ufb01ne an extra no-op bytecode that indicates a loop\nheader. The VM calls into the trace monitor every time the inter-\npreter executes a loop header no-op. To blacklist a fragment, we\nsimply replace the loop header no-op with a regular no-op. Thus,\nthe interpreter will never again even call into the trace monitor.\n',
  },
  {
    x: 87.94026666666663,
    y: 5944.003656533333,
    width: 302.8610816000001,
    height: 11.955200000000028,
    text: 'There is a related problem we have not yet solved, which occurs\n',
  },
  {
    x: 71.99999999999997,
    y: 5957.2871232,
    width: 200.8951808,
    height: 11.955200000000028,
    text: 'when a loop meets all of these conditions:\n',
  },
  {
    x: 78.9737333333333,
    y: 5976.689732533332,
    width: 263.94827840000016,
    height: 12.345124000000016,
    text: '\u2022 The VM can form at least one root trace for the loop.\n',
  },
  {
    x: 78.9737333333333,
    y: 5995.286665866666,
    width: 311.8288544000002,
    height: 12.345124000000016,
    text: '\u2022 There is at least one hot side exit for which the VM cannot\n',
  },
  {
    x: 89.2685333333333,
    y: 6008.960056533333,
    width: 81.33122560000001,
    height: 11.955200000000028,
    text: 'complete a trace.\n',
  },
  {
    x: 78.9737333333333,
    y: 6027.167065866666,
    width: 120.88039999999997,
    height: 12.345124000000016,
    text: '\u2022 The loop body is short.\n',
  },
  {
    x: 71.99999999999996,
    y: 6047.349389866666,
    width: 318.8093184000003,
    height: 131.50693333333345,
    text: 'In this case, the VM will repeatedly pass the loop header, search\nfor a trace, \ufb01nd it, execute it, and fall back to the interpreter.\nWith a short loop body, the overhead of \ufb01nding and calling the\ntrace is high, and causes performance to be even slower than the\nbasic interpreter. So far, in this situation we have improved the\nimplementation so that the VM can complete the branch trace.\nBut it is hard to guarantee that this situation will never happen.\nAs future work, this situation could be avoided by detecting and\nblacklisting loops for which the average trace call executes few\nbytecodes before returning to the interpreter.\n',
  },
  {
    x: 71.99999999999996,
    y: 6194.736680133334,
    width: 318.80931840000017,
    height: 72.58777639999997,
    text: '4. Nested Trace Tree Formation\nFigure 7 shows basic trace tree compilation (11) applied to a nested\nloop where the inner loop contains two paths. Usually, the inner\nloop (with header at i2) becomes hot \ufb01rst, and a trace tree is rooted\nat that point. For example, the \ufb01rst recorded trace may be a cycle\n',
  },
  {
    x: 422.6849333333333,
    y: 5596.7438368,
    width: 318.81104000000016,
    height: 65.17288639999984,
    text: 'Figure 5. A tree with two traces, a trunk trace and one branch\ntrace. The trunk trace contains a guard to which a branch trace was\nattached. The branch trace contain a guard that may fail and trigger\na side exit. Both the trunk and the branch trace loop back to the tree\nanchor, which is the beginning of the trace tree.\n',
  },
  {
    x: 422.6849333333333,
    y: 5954.889836799999,
    width: 318.8093184000002,
    height: 118.30701973333339,
    text: 'Figure 6. We handle type-unstable loops by allowing traces to\ncompile that cannot loop back to themselves due to a type mis-\nmatch. As such traces accumulate, we attempt to connect their loop\nedges to form groups of trace trees that can execute without having\nto side-exit to the interpreter to cover odd type cases. This is par-\nticularly important for nested trace trees where an outer tree tries to\ncall an inner tree (or in this case a forest of inner trees), since inner\nloops frequently have initially unde\ufb01ned values which change type\nto a concrete value after the \ufb01rst iteration.\n',
  },
  {
    x: 422.6849333333333,
    y: 6095.7041088000005,
    width: 318.79904320000014,
    height: 25.50168106666668,
    text: 'through the inner loop, {i2, i3, i5, \u03b1}. The \u03b1 symbol is used to\nindicate that the trace loops back the tree anchor.\n',
  },
  {
    x: 422.6849333333333,
    y: 6122.534189866667,
    width: 318.80931840000005,
    height: 65.08920000000006,
    text: 'When execution leaves the inner loop, the basic design has two\nchoices. First, the system can stop tracing and give up on compiling\nthe outer loop, clearly an undesirable solution. The other choice is\nto continue tracing, compiling traces for the outer loop inside the\ninner loop\u2019s trace tree.\n',
  },
  {
    x: 422.6849333333331,
    y: 6188.688775466666,
    width: 318.8093184000002,
    height: 78.63581439999997,
    text: 'For example, the program might exit at i5 and record a branch\nincorporates the outer loop: {i5, i7, i1, i6, i7, i1, \u03b1}.\ntrace that\nLater, the program might take the other branch at i2 and then\nexit, recording another branch trace incorporating the outer loop:\n{i2, i4, i5, i7, i1, i6, i7, i1, \u03b1}. Thus, the outer loop is recorded and\ncompiled twice, and both copies must be retained in the trace cache.\n',
  },
  {
    x: 72.0,
    y: 6659.946903466666,
    width: 318.8099189333334,
    height: 65.17301973333329,
    text: 'Figure 7. Control \ufb02ow graph of a nested loop with an if statement\ninside the inner most loop (a). An inner tree captures the inner\nloop, and is nested inside an outer tree which \u201ccalls\u201d the inner tree.\nThe inner tree returns to the outer tree once it exits along its loop\ncondition guard (b).\n',
  },
  {
    x: 71.99999999999996,
    y: 6751.146908799999,
    width: 318.80512640000006,
    height: 39.36754773333337,
    text: 'In general, if loops are nested to depth k, and each loop has n paths\n(on geometric average), this na\u00a8\u0131ve strategy yields O(nk) traces,\nwhich can easily \ufb01ll the trace cache.\n',
  },
  {
    x: 72.00000000000004,
    y: 6791.842856533332,
    width: 318.8093184000001,
    height: 38.52226666666668,
    text: 'In order to execute programs with nested loops ef\ufb01ciently, a\ntracing system needs a technique for covering the nested loops with\nnative code without exponential trace duplication.\n',
  },
  {
    x: 72.00000000000004,
    y: 6842.796503466667,
    width: 121.5365632,
    height: 11.955199999999952,
    text: '4.1 Nesting Algorithm\n',
  },
  {
    x: 72.00000000000004,
    y: 6861.477123199999,
    width: 318.80931840000017,
    height: 131.50680000000003,
    text: 'The key insight is that if each loop is represented by its own trace\ntree, the code for each loop can be contained only in its own tree,\nand outer loop paths will not be duplicated. Another key fact is that\nwe are not tracing arbitrary bytecodes that might have irreduceable\ncontrol \ufb02ow graphs, but rather bytecodes produced by a compiler\nfor a language with structured control \ufb02ow. Thus, given two loop\nedges, the system can easily determine whether they are nested\nand which is the inner loop. Using this knowledge, the system can\ncompile inner and outer loops separately, and make the outer loop\u2019s\ntraces call the inner loop\u2019s trace tree.\n',
  },
  {
    x: 72.00000000000004,
    y: 6994.3123232,
    width: 318.8107850666667,
    height: 105.232016,
    text: 'The algorithm for building nested trace trees is as follows. We\nstart tracing at loop headers exactly as in the basic tracing system.\nWhen we exit a loop (detected by comparing the interpreter PC\nwith the range given by the loop edge), we stop the trace. The\nkey step of the algorithm occurs when we are recording a trace\nfor loop LR (R for loop being recorded) and we reach the header\nof a different loop LO (O for other loop). Note that LO must be an\ninner loop of LR because we stop the trace when we exit a loop.\n',
  },
  {
    x: 78.97386666666674,
    y: 7107.112265866666,
    width: 311.83135786666656,
    height: 52.19552400000005,
    text: '\u2022 If LO has a type-matching compiled trace tree, we call LO as\na nested trace tree. If the call succeeds, then we record the call\nin the trace for LR. On future executions, the trace for LR will\ncall the inner trace directly.\n',
  },
  {
    x: 78.97399999999998,
    y: 7165.559599199999,
    width: 311.8345813333334,
    height: 65.9621906666667,
    text: '\u2022 If LO does not have a type-matching compiled trace tree yet,\nwe have to obtain it before we are able to proceed. In order\nto do this, we simply abort recording the \ufb01rst trace. The trace\nmonitor will see the inner loop header, and will immediately\nstart recording the inner loop. 2\n',
  },
  {
    x: 72.00026666666665,
    y: 7239.771789866667,
    width: 318.8013482666667,
    height: 25.238799999999987,
    text: 'If all the loops in a nest are type-stable, then loop nesting creates\nno duplication. Otherwise, if loops are nested to a depth k, and each\n',
  },
  {
    x: 72.0,
    y: 7278.877815466666,
    width: 318.8093384000002,
    height: 48.15983999999999,
    text: '2 Instead of aborting the outer recording, we could principally merely sus-\npend the recording, but that would require the implementation to be able\nto record several traces simultaneously, complicating the implementation,\nwhile saving only a few iterations in the interpreter.\n',
  },
  {
    x: 422.6849333333333,
    y: 6634.886770133333,
    width: 318.80931840000005,
    height: 51.88941973333324,
    text: 'Figure 8. Control \ufb02ow graph of a loop with two nested loops (left)\nand its nested trace tree con\ufb01guration (right). The outer tree calls\nthe two inner nested trace trees and places guards at their side exit\nlocations.\n',
  },
  {
    x: 422.6849333333333,
    y: 6719.074775466666,
    width: 318.81034026666657,
    height: 39.36754773333344,
    text: 'loop is entered with m different type maps (on geometric average),\nthen we compile O(mk) copies of the innermost loop. As long as\nm is close to 1, the resulting trace trees will be tractable.\n',
  },
  {
    x: 422.68493333333333,
    y: 6759.770723199999,
    width: 318.8093184000003,
    height: 224.49146666666667,
    text: 'An important detail is that the call to the inner trace tree must act\nlike a function call site: it must return to the same point every time.\nThe goal of nesting is to make inner and outer loops independent;\nthus when the inner tree is called, it must exit to the same point\nin the outer tree every time with the same type map. Because we\ncannot actually guarantee this property, we must guard on it after\nthe call, and side exit if the property does not hold. A common\nreason for the inner tree not to return to the same point would\nbe if the inner tree took a new side exit for which it had never\ncompiled a trace. At this point, the interpreter PC is in the inner\ntree, so we cannot continue recording or executing the outer tree.\nIf this happens during recording, we abort the outer trace, to give\nthe inner tree a chance to \ufb01nish growing. A future execution of the\nouter tree would then be able to properly \ufb01nish and record a call to\nthe inner tree. If an inner tree side exit happens during execution of\na compiled trace for the outer tree, we simply exit the outer trace\nand start recording a new branch in the inner tree.\n',
  },
  {
    x: 422.68493333333333,
    y: 7001.054770133333,
    width: 154.43727360000003,
    height: 11.955199999999952,
    text: '4.2 Blacklisting with Nesting\n',
  },
  {
    x: 422.68493333333333,
    y: 7019.735389866666,
    width: 318.8093184000003,
    height: 65.08920000000003,
    text: 'The blacklisting algorithm needs modi\ufb01cation to work well with\nnesting. The problem is that outer loop traces often abort during\nstartup (because the inner tree is not available or takes a side exit),\nwhich would lead to their being quickly blacklisted by the basic\nalgorithm.\n',
  },
  {
    x: 422.68493333333333,
    y: 7086.152989866667,
    width: 318.80931840000017,
    height: 51.8057333333334,
    text: 'The key observation is that when an outer trace aborts because\nthe inner tree is not ready, this is probably a temporary condition.\nThus, we should not count such aborts toward blacklisting as long\nas we are able to build up more traces for the inner tree.\n',
  },
  {
    x: 422.68493333333333,
    y: 7139.286989866666,
    width: 318.8093184000003,
    height: 91.65640000000008,
    text: 'In our implementation, when an outer tree aborts on the inner\ntree, we increment the outer tree\u2019s blacklist counter as usual and\nback off on compiling it. When the inner tree \ufb01nishes a trace, we\ndecrement the blacklist counter on the outer loop, \u201cforgiving\u201d the\nouter loop for aborting previously. We also undo the backoff so that\nthe outer tree can start immediately trying to compile the next time\nwe reach it.\n',
  },
  {
    x: 422.68493333333333,
    y: 7254.736813466666,
    width: 318.8093184,
    height: 72.58777639999997,
    text: '5. Trace Tree Optimization\nThis section explains how a recorded trace is translated to an\noptimized machine code trace. The trace compilation subsystem,\nNANOJIT, is separate from the VM and can be used for other\napplications.\n',
  },
  {
    x: 72.0,
    y: 7517.170236799999,
    width: 99.2998912,
    height: 11.955200000000028,
    text: '5.1 Optimizations\n',
  },
  {
    x: 72.0,
    y: 7535.587842133333,
    width: 318.8093184000003,
    height: 91.91928106666651,
    text: 'Because traces are in SSA form and have no join points or \u03c6-\nnodes, certain optimizations are easy to implement. In order to\nget good startup performance, the optimizations must run quickly,\nso we chose a small set of optimizations. We implemented the\noptimizations as pipelined \ufb01lters so that they can be turned on and\noff independently, and yet all run in just two loop passes over the\ntrace: one forward and one backward.\n',
  },
  {
    x: 72.00000000000003,
    y: 7628.8355232,
    width: 318.8093184000001,
    height: 105.23201599999993,
    text: 'Every time the trace recorder emits a LIR instruction, the in-\nstruction is immediately passed to the \ufb01rst \ufb01lter in the forward\npipeline. Thus, forward \ufb01lter optimizations are performed as the\ntrace is recorded. Each \ufb01lter may pass each instruction to the next\n\ufb01lter unchanged, write a different instruction to the next \ufb01lter, or\nwrite no instruction at all. For example, the constant folding \ufb01lter\ncan replace a multiply instruction like v13 := mul3, 1000 with a\nconstant instruction v13 = 3000.\n',
  },
  {
    x: 87.94013333333336,
    y: 7735.1036565333325,
    width: 188.49763839999997,
    height: 11.955199999999877,
    text: 'We currently apply four forward \ufb01lters:\n',
  },
  {
    x: 78.97373333333337,
    y: 7757.827065866666,
    width: 311.8288544000002,
    height: 38.912190666666596,
    text: '\u2022 On ISAs without \ufb02oating-point instructions, a soft-\ufb02oat \ufb01lter\nconverts \ufb02oating-point LIR instructions to sequences of integer\ninstructions.\n',
  },
  {
    x: 78.97373333333337,
    y: 7802.991065866667,
    width: 214.01140800000002,
    height: 12.345124000000016,
    text: '\u2022 CSE (constant subexpression elimination),\n',
  },
  {
    x: 78.97373333333337,
    y: 7821.587999199999,
    width: 311.82885440000007,
    height: 12.345124000000016,
    text: '\u2022 expression simpli\ufb01cation, including constant folding and a few\n',
  },
  {
    x: 89.26853333333338,
    y: 7834.9983754666655,
    width: 198.63799040000004,
    height: 12.218214400000003,
    text: 'algebraic identities (e.g., a \u2212 a = 0), and\n',
  },
  {
    x: 78.9737333333334,
    y: 7853.468399199999,
    width: 311.8357546666667,
    height: 52.19565733333335,
    text: '\u2022 source language semantic-speci\ufb01c expression simpli\ufb01cation,\nprimarily algebraic identities that allow DOUBLE to be replaced\nwith INT. For example, LIR that converts an INT to a DOUBLE\nand then back again would be removed by this \ufb01lter.\n',
  },
  {
    x: 72.00000000000007,
    y: 7916.822189866665,
    width: 318.8093184000003,
    height: 65.08933333333334,
    text: 'When trace recording is completed, nanojit runs the backward\noptimization \ufb01lters. These are used for optimizations that require\nbackward program analysis. When running the backward \ufb01lters,\nnanojit reads one LIR instruction at a time, and the reads are passed\nthrough the pipeline.\n',
  },
  {
    x: 87.9401333333334,
    y: 7983.239789866666,
    width: 201.11037439999996,
    height: 11.955200000000028,
    text: 'We currently apply three backward \ufb01lters:\n',
  },
  {
    x: 78.9737333333334,
    y: 8005.9631991999995,
    width: 311.8288544000002,
    height: 78.762724,
    text: '\u2022 Dead data-stack store elimination. The LIR trace encodes many\nstores to locations in the interpreter stack. But these values are\nnever read back before exiting the trace (by the interpreter or\nanother trace). Thus, stores to the stack that are overwritten\nbefore the next exit are dead. Stores to locations that are off\nthe top of the interpreter stack at future exits are also dead.\n',
  },
  {
    x: 78.97373333333341,
    y: 8090.9777325333325,
    width: 311.82885440000007,
    height: 38.912190666666675,
    text: '\u2022 Dead call-stack store elimination. This is the same optimization\nas above, except applied to the interpreter\u2019s call stack used for\nfunction call inlining.\n',
  },
  {
    x: 78.97373333333341,
    y: 8136.141732533332,
    width: 311.8288544000002,
    height: 12.345124000000016,
    text: '\u2022 Dead code elimination. This eliminates any operation that\n',
  },
  {
    x: 89.26853333333341,
    y: 8149.815123199999,
    width: 165.90231040000003,
    height: 11.955200000000028,
    text: 'stores to a value that is never used.\n',
  },
  {
    x: 72.00000000000007,
    y: 8172.928456533333,
    width: 318.80931840000005,
    height: 38.522266666666724,
    text: 'After a LIR instruction is successfully read (\u201cpulled\u201d) from\nthe backward \ufb01lter pipeline, nanojit\u2019s code generator emits native\nmachine instruction(s) for it.\n',
  },
  {
    x: 72.00000000000007,
    y: 8223.8534368,
    width: 124.8481536,
    height: 11.95519999999999,
    text: '5.2 Register Allocation\n',
  },
  {
    x: 71.99986666666678,
    y: 8242.534056533332,
    width: 318.8094517333335,
    height: 104.93986666666672,
    text: 'We use a simple greedy register allocator that makes a single\nbackward pass over the trace (it is integrated with the code gen-\nerator). By the time the allocator has reached an instruction like\nv3 = add v1, v2, it has already assigned a register to v3. If v1 and\nv2 have not yet been assigned registers, the allocator assigns a free\nregister to each. If there are no free registers, a value is selected for\nspilling. We use a class heuristic that selects the \u201coldest\u201d register-\ncarried value (6).\n',
  },
  {
    x: 71.99986666666673,
    y: 8348.539175466665,
    width: 318.8077183999999,
    height: 38.785281066666656,
    text: 'The heuristic considers the set R of values v in registers imme-\ndiately after the current instruction for spilling. Let vm be the last\ninstruction before the current where each v is referred to. Then the\n',
  },
  {
    x: 431.4012000000001,
    y: 7515.9255232,
    width: 17.932933333333267,
    height: 78.90413333333345,
    text: 'Tag\nxx1\n000\n010\n100\n110\n',
  },
  {
    x: 465.2744,
    y: 7515.9255232,
    width: 47.151308799999995,
    height: 105.4711999999998,
    text: 'JS Type\nnumber\nobject\nnumber\nstring\nboolean\nnull, or\nunde\ufb01ned\n',
  },
  {
    x: 528.3654666666666,
    y: 7515.9255232,
    width: 204.41000960000002,
    height: 78.90413333333329,
    text: 'Description\n31-bit integer representation\npointer to JSObject handle\npointer to double handle\npointer to JSString handle\nenumeration for null, unde\ufb01ned, true, false\n',
  },
  {
    x: 422.68493333333333,
    y: 7632.645170133333,
    width: 318.8093184000003,
    height: 51.88941973333324,
    text: 'Figure 9. Tagged values in the SpiderMonkey JS interpreter.\nTesting tags, unboxing (extracting the untagged value) and boxing\n(creating tagged values) are signi\ufb01cant costs. Avoiding these costs\nis a key bene\ufb01t of tracing.\n',
  },
  {
    x: 422.68493333333333,
    y: 7721.7633088,
    width: 318.8008853333333,
    height: 25.501681066666606,
    text: 'heuristic selects v with minimum vm. The motivation is that this\nfrees up a register for as long as possible given a single spill.\n',
  },
  {
    x: 422.68493333333333,
    y: 7748.330375466667,
    width: 318.8093184000003,
    height: 78.63581440000007,
    text: 'If we need to spill a value vs at this point, we generate the\nrestore code just after the code for the current instruction. The\ncorresponding spill code is generated just after the last point where\nvs was used. The register that was assigned to vs is marked free for\nthe preceding code, because that register can now be used freely\nwithout affecting the following code\n',
  },
  {
    x: 448.25570000000005,
    y: 7845.6453468,
    width: 99.84288493333338,
    height: 14.611866666666629,
    text: 'Implementation\n',
  },
  {
    x: 422.68493333333345,
    y: 7845.6453468,
    width: 318.8093184000002,
    height: 99.15484306666667,
    text: '6.\nTo demonstrate the effectiveness of our approach, we have im-\nplemented a trace-based dynamic compiler for the SpiderMonkey\nJavaScript Virtual Machine (4). SpiderMonkey is the JavaScript\nVM embedded in Mozilla\u2019s Firefox open-source web browser (2),\nwhich is used by more than 200 million users world-wide. The core\nof SpiderMonkey is a bytecode interpreter implemented in C++.\n',
  },
  {
    x: 422.68493333333333,
    y: 7946.1284565333335,
    width: 318.8093184,
    height: 65.08933333333334,
    text: 'In SpiderMonkey, all JavaScript values are represented by the\ntype jsval. A jsval is machine word in which up to the 3 of the\nleast signi\ufb01cant bits are a type tag, and the remaining bits are data.\nSee Figure 6 for details. All pointers contained in jsvals point to\nGC-controlled blocks aligned on 8-byte boundaries.\n',
  },
  {
    x: 422.68493333333345,
    y: 8012.271086933332,
    width: 318.8105216,
    height: 105.21483626666668,
    text: 'JavaScript object values are mappings of string-valued property\nnames to arbitrary values. They are represented in one of two ways\nin SpiderMonkey. Most objects are represented by a shared struc-\ntural description, called the object shape, that maps property names\nto array indexes using a hash table. The object stores a pointer to\nthe shape and the array of its own property values. Objects with\nlarge, unique sets of property names store their properties directly\nin a hash table.\n',
  },
  {
    x: 438.6250666666668,
    y: 8118.814189866666,
    width: 302.86108160000003,
    height: 11.955200000000028,
    text: 'The garbage collector is an exact, non-generational, stop-the-\n',
  },
  {
    x: 422.68493333333345,
    y: 8132.097789866666,
    width: 157.5814912,
    height: 11.955199999999952,
    text: 'world mark-and-sweep collector.\n',
  },
  {
    x: 438.6250666666668,
    y: 8145.381256533333,
    width: 302.86108160000003,
    height: 11.95519999999999,
    text: 'In the rest of this section we discuss key areas of the TraceMon-\n',
  },
  {
    x: 422.68493333333345,
    y: 8158.6647232,
    width: 97.99677439999996,
    height: 11.95519999999999,
    text: 'key implementation.\n',
  },
  {
    x: 422.68493333333345,
    y: 8184.002903466666,
    width: 153.54063359999992,
    height: 11.95519999999999,
    text: '6.1 Calling Compiled Traces\n',
  },
  {
    x: 422.68493333333345,
    y: 8202.408553599998,
    width: 318.8093184000002,
    height: 52.15243413333337,
    text: 'Compiled traces are stored in a trace cache, indexed by intepreter\nPC and type map. Traces are compiled so that they may be\ncalled as functions using standard native calling conventions (e.g.,\nFASTCALL on x86).\n',
  },
  {
    x: 422.68493333333345,
    y: 8255.817656533332,
    width: 318.8093184000002,
    height: 51.80573333333338,
    text: 'The interpreter must hit a loop edge and enter the monitor in\norder to call a native trace for the \ufb01rst time. The monitor computes\nthe current type map, checks the trace cache for a trace for the\ncurrent PC and type map, and if it \ufb01nds one, executes the trace.\n',
  },
  {
    x: 422.68493333333345,
    y: 8308.951656533332,
    width: 318.8093184000002,
    height: 78.37279999999996,
    text: 'To execute a trace, the monitor must build a trace activation\nrecord containing imported local and global variables, temporary\nstack space, and space for arguments to native calls. The local and\nglobal values are then copied from the interpreter state to the trace\nactivation record. Then, the trace is called like a normal C function\npointer.\n',
  },
  {
    x: 72.0,
    y: 8577.2539232,
    width: 318.8093184000002,
    height: 78.37279999999978,
    text: 'When a trace call returns, the monitor restores the interpreter\nstate. First, the monitor checks the reason for the trace exit and\napplies blacklisting if needed. Then, it pops or synthesizes inter-\npreter JavaScript call stack frames as needed. Finally, it copies the\nimported variables back from the trace activation record to the in-\nterpreter state.\n',
  },
  {
    x: 72.0,
    y: 8656.9551232,
    width: 318.8093184000002,
    height: 118.22333333333304,
    text: 'At least in the current implementation, these steps have a non-\nnegligible runtime cost, so minimizing the number of interpreter-\nto-trace and trace-to-interpreter transitions is essential for perfor-\nmance. (see also Section 3.3). Our experiments (see Figure 12)\nshow that for programs we can trace well such transitions hap-\npen infrequently and hence do not contribute signi\ufb01cantly to total\nruntime. In a few programs, where the system is prevented from\nrecording branch traces for hot side exits by aborts, this cost can\nrise to up to 10% of total execution time.\n',
  },
  {
    x: 72.0,
    y: 8788.3782368,
    width: 104.71559680000003,
    height: 11.955200000000028,
    text: '6.2 Trace Stitching\n',
  },
  {
    x: 72.0,
    y: 8807.058856533333,
    width: 318.8093184000002,
    height: 91.65626666666662,
    text: 'Transitions from a trace to a branch trace at a side exit avoid the\ncosts of calling traces from the monitor, in a feature called trace\nstitching. At a side exit, the exiting trace only needs to write live\nregister-carried values back to its trace activation record. In our im-\nplementation, identical type maps yield identical activation record\nlayouts, so the trace activation record can be reused immediately\nby the branch trace.\n',
  },
  {
    x: 72.00000000000004,
    y: 8900.043523199998,
    width: 318.8093184000003,
    height: 131.50680000000003,
    text: 'In programs with branchy trace trees with small traces, trace\nstitching has a noticeable cost. Although writing to memory and\nthen soon reading back would be expected to have a high L1\ncache hit rate, for small traces the increased instruction count has\na noticeable cost. Also, if the writes and reads are very close\nin the dynamic instruction stream, we have found that current\nx86 processors often incur penalties of 6 cycles or more (e.g., if\nthe instructions use different base registers with equal values, the\nprocessor may not be able to detect that the addresses are the same\nright away).\n',
  },
  {
    x: 72.00000000000004,
    y: 9032.8787232,
    width: 318.8093184000003,
    height: 91.6562666666667,
    text: 'The alternate solution is to recompile an entire trace tree, thus\nachieving inter-trace register allocation (10). The disadvantage is\nthat tree recompilation takes time quadratic in the number of traces.\nWe believe that the cost of recompiling a trace tree every time\na branch is added would be prohibitive. That problem might be\nmitigated by recompiling only at certain points, or only for very\nhot, stable trees.\n',
  },
  {
    x: 72.00000000000004,
    y: 9125.863389866667,
    width: 318.80931840000017,
    height: 65.08920000000003,
    text: 'In the future, multicore hardware is expected to be common,\nmaking background tree recompilation attractive. In a closely re-\nlated project (13) background recompilation yielded speedups of\nup to 1.25x on benchmarks with many branch traces. We plan to\napply this technique to TraceMonkey as future work.\n',
  },
  {
    x: 72.00000000000004,
    y: 9204.152370133332,
    width: 112.00826880000002,
    height: 11.95519999999999,
    text: '6.3 Trace Recording\n',
  },
  {
    x: 72.00000000000004,
    y: 9222.832989866665,
    width: 318.80931840000017,
    height: 65.08933333333337,
    text: 'The job of the trace recorder is to emit LIR with identical semantics\nto the currently running interpreter bytecode trace. A good imple-\nmentation should have low impact on non-tracing interpreter per-\nformance and a convenient way for implementers to maintain se-\nmantic equivalence.\n',
  },
  {
    x: 72.00000000000004,
    y: 9289.250589866666,
    width: 318.8093184000003,
    height: 158.07400000000004,
    text: 'In our implementation, the only direct modi\ufb01cation to the inter-\npreter is a call to the trace monitor at loop edges. In our benchmark\nresults (see Figure 12) the total time spent in the monitor (for all\nactivities) is usually less than 5%, so we consider the interpreter\nimpact requirement met. Incrementing the loop hit counter is ex-\npensive because it requires us to look up the loop in the trace cache,\nbut we have tuned our loops to become hot and trace very quickly\n(on the second iteration). The hit counter implementation could be\nimproved, which might give us a small increase in overall perfor-\nmance, as well as more \ufb02exibility with tuning hotness thresholds.\nOnce a loop is blacklisted we never call into the trace monitor for\nthat loop (see Section 3.3).\n',
  },
  {
    x: 422.68493333333345,
    y: 8577.2539232,
    width: 318.8093184000002,
    height: 171.35746666666637,
    text: 'Recording is activated by a pointer swap that sets the inter-\npreter\u2019s dispatch table to call a single \u201cinterrupt\u201d routine for ev-\nery bytecode. The interrupt routine \ufb01rst calls a bytecode-speci\ufb01c\nrecording routine. Then, it turns off recording if necessary (e.g.,\nthe trace ended). Finally, it jumps to the standard interpreter byte-\ncode implementation. Some bytecodes have effects on the type map\nthat cannot be predicted before executing the bytecode (e.g., call-\ning String.charCodeAt, which returns an integer or NaN if the\nindex argument is out of range). For these, we arrange for the inter-\npreter to call into the recorder again after executing the bytecode.\nSince such hooks are relatively rare, we embed them directly into\nthe interpreter, with an additional runtime check to see whether a\nrecorder is currently active.\n',
  },
  {
    x: 422.68493333333345,
    y: 8749.939656533334,
    width: 318.8093184000002,
    height: 38.52226666666653,
    text: 'While separating the interpreter from the recorder reduces indi-\nvidual code complexity, it also requires careful implementation and\nextensive testing to achieve semantic equivalence.\n',
  },
  {
    x: 422.68493333333345,
    y: 8789.790323199999,
    width: 318.8080554666667,
    height: 38.52213333333308,
    text: 'In some cases achieving this equivalence is dif\ufb01cult since Spi-\nderMonkey follows a fat-bytecode design, which was found to be\nbene\ufb01cial to pure interpreter performance.\n',
  },
  {
    x: 422.68493333333345,
    y: 8829.640856533333,
    width: 318.8093184000002,
    height: 51.80573333333321,
    text: 'In fat-bytecode designs, individual bytecodes can implement\ncomplex processing (e.g., the getprop bytecode, which imple-\nments full JavaScript property value access, including special cases\nfor cached and dense array access).\n',
  },
  {
    x: 422.68493333333345,
    y: 8882.774856533331,
    width: 318.8093184000002,
    height: 38.52226666666668,
    text: 'Fat bytecodes have two advantages: fewer bytecodes means\nlower dispatch cost, and bigger bytecode implementations give the\ncompiler more opportunities to optimize the interpreter.\n',
  },
  {
    x: 422.68493333333345,
    y: 8922.625523199998,
    width: 318.8093184000002,
    height: 91.6562666666667,
    text: 'Fat bytecodes are a problem for TraceMonkey because they\nrequire the recorder to reimplement the same special case logic\nin the same way. Also, the advantages are reduced because (a)\ndispatch costs are eliminated entirely in compiled traces, (b) the\ntraces contain only one special case, not the interpreter\u2019s large\nchunk of code, and (c) TraceMonkey spends less time running the\nbase interpreter.\n',
  },
  {
    x: 422.68493333333345,
    y: 9015.610056533333,
    width: 318.8093184000002,
    height: 118.22346666666665,
    text: 'One way we have mitigated these problems is by implementing\ncertain complex bytecodes in the recorder as sequences of simple\nbytecodes. Expressing the original semantics this way is not too dif-\n\ufb01cult, and recording simple bytecodes is much easier. This enables\nus to retain the advantages of fat bytecodes while avoiding some of\ntheir problems for trace recording. This is particularly effective for\nfat bytecodes that recurse back into the interpreter, for example to\nconvert an object into a primitive value by invoking a well-known\nmethod on the object, since it lets us inline this function call.\n',
  },
  {
    x: 422.68493333333345,
    y: 9135.161789866666,
    width: 318.80931840000005,
    height: 51.805733333333364,
    text: 'It is important to note that we split fat opcodes into thinner op-\ncodes only during recording. When running purely interpretatively\n(i.e. code that has been blacklisted), the interpreter directly and ef-\n\ufb01ciently executes the fat opcodes.\n',
  },
  {
    x: 422.68493333333345,
    y: 9217.435970133332,
    width: 86.44805120000001,
    height: 11.95519999999999,
    text: '6.4 Preemption\n',
  },
  {
    x: 422.68493333333345,
    y: 9236.116589866666,
    width: 318.80931840000005,
    height: 38.52213333333334,
    text: 'SpiderMonkey, like many VMs, needs to preempt the user program\nperiodically. The main reasons are to prevent in\ufb01nitely looping\nscripts from locking up the host system and to schedule GC.\n',
  },
  {
    x: 422.68493333333345,
    y: 9275.9671232,
    width: 318.8093184000002,
    height: 91.65626666666675,
    text: 'In the interpreter, this had been implemented by setting a \u201cpre-\nempt now\u201d \ufb02ag that was checked on every backward jump. This\nstrategy carried over into TraceMonkey: the VM inserts a guard on\nthe preemption \ufb02ag at every loop edge. We measured less than a\n1% increase in runtime on most benchmarks for this extra guard.\nIn practice, the cost is detectable only for programs with very short\nloops.\n',
  },
  {
    x: 422.68493333333345,
    y: 9368.951789866665,
    width: 318.8093184000002,
    height: 78.37279999999996,
    text: 'We tested and rejected a solution that avoided the guards by\ncompiling the loop edge as an unconditional jump, and patching\nthe jump target to an exit routine when preemption is required.\nThis solution can make the normal case slightly faster, but then\npreemption becomes very slow. The implementation was also very\ncomplex, especially trying to restart execution after the preemption.\n',
  },
  {
    x: 72.0,
    y: 9637.170236799999,
    width: 164.8861184,
    height: 11.955200000000028,
    text: '6.5 Calling External Functions\n',
  },
  {
    x: 72.0,
    y: 9655.850856533332,
    width: 318.80931840000017,
    height: 158.0738666666663,
    text: 'Like most interpreters, SpiderMonkey has a foreign function inter-\nface (FFI) that allows it to call C builtins and host system functions\n(e.g., web browser control and DOM access). The FFI has a stan-\ndard signature for JS-callable functions, the key argument of which\nis an array of boxed values. External functions called through the\nFFI interact with the program state through an interpreter API (e.g.,\nto read a property from an argument). There are also certain inter-\npreter builtins that do not use the FFI, but interact with the program\nstate in the same way, such as the CallIteratorNext function\nused with iterator objects. TraceMonkey must support this FFI in\norder to speed up code that interacts with the host system inside hot\nloops.\n',
  },
  {
    x: 72.0,
    y: 9815.2531232,
    width: 318.80931840000005,
    height: 51.80573333333314,
    text: 'Calling external functions from TraceMonkey is potentially dif-\n\ufb01cult because traces do not update the interpreter state until exit-\ning. In particular, external functions may need the call stack or the\nglobal variables, but they may be out of date.\n',
  },
  {
    x: 72.0,
    y: 9868.387123199998,
    width: 318.80931840000017,
    height: 38.52226666666653,
    text: 'For the out-of-date call stack problem, we refactored some of\nthe interpreter API implementation functions to re-materialize the\ninterpreter call stack on demand.\n',
  },
  {
    x: 72.0,
    y: 9908.237789866665,
    width: 318.8106016000002,
    height: 184.64093333333335,
    text: 'We developed a C++ static analysis and annotated some inter-\npreter functions in order to verify that the call stack is refreshed\nat any point it needs to be used. In order to access the call stack,\na function must be annotated as either FORCESSTACK or RE-\nQUIRESSTACK. These annotations are also required in order to call\nREQUIRESSTACK functions, which are presumed to access the call\nstack transitively. FORCESSTACK is a trusted annotation, applied\nto only 5 functions, that means the function refreshes the call stack.\nREQUIRESSTACK is an untrusted annotation that means the func-\ntion may only be called if the call stack has already been refreshed.\nSimilarly, we detect when host functions attempt to directly\nread or write global variables, and force the currently running trace\nto side exit. This is necessary since we cache and unbox global\nvariables into the activation record during trace execution.\n',
  },
  {
    x: 72.00000000000009,
    y: 10094.206989866667,
    width: 318.80931840000017,
    height: 38.52226666666668,
    text: 'Since both call-stack access and global variable access are\nrarely performed by host functions, performance is not signi\ufb01cantly\naffected by these safety mechanisms.\n',
  },
  {
    x: 72.00000000000009,
    y: 10134.0575232,
    width: 318.8093184000002,
    height: 65.08933333333334,
    text: 'Another problem is that external functions can reenter the inter-\npreter by calling scripts, which in turn again might want to access\nthe call stack or global variables. To address this problem, we made\nthe VM set a \ufb02ag whenever the interpreter is reentered while a com-\npiled trace is running.\n',
  },
  {
    x: 72.00000000000009,
    y: 10200.475123199998,
    width: 318.8093184000002,
    height: 65.08933333333334,
    text: 'Every call to an external function then checks this \ufb02ag and exits\nthe trace immediately after returning from the external function call\nif it is set. There are many external functions that seldom or never\nreenter, and they can be called without problem, and will cause\ntrace exit only if necessary.\n',
  },
  {
    x: 72.00000000000009,
    y: 10266.892723199999,
    width: 318.80931840000005,
    height: 51.80586666666674,
    text: 'The FFI\u2019s boxed value array requirement has a performance\ncost, so we de\ufb01ned a new FFI that allows C functions to be an-\nnotated with their argument types so that the tracer can call them\ndirectly, without unnecessary argument conversions.\n',
  },
  {
    x: 72.00000000000009,
    y: 10320.026856533332,
    width: 318.80931840000017,
    height: 38.52226666666668,
    text: 'Currently, we do not support calling native property get and set\noverride functions or DOM functions directly from trace. Support\nis planned future work.\n',
  },
  {
    x: 72.00000000000009,
    y: 10370.420503466667,
    width: 87.76312320000001,
    height: 11.95519999999999,
    text: '6.6 Correctness\n',
  },
  {
    x: 72.00000000000009,
    y: 10389.101123199998,
    width: 318.80931840000005,
    height: 38.5222666666667,
    text: 'During development, we had access to existing JavaScript test\nsuites, but most of them were not designed with tracing VMs in\nmind and contained few loops.\n',
  },
  {
    x: 72.00000000000007,
    y: 10428.951656533332,
    width: 318.80931840000017,
    height: 78.37279999999996,
    text: 'One tool that helped us greatly was Mozilla\u2019s JavaScript fuzz\ntester, JSFUNFUZZ, which generates random JavaScript programs\nby nesting random language elements. We modi\ufb01ed JSFUNFUZZ\nto generate loops, and also to test more heavily certain constructs\nwe suspected would reveal \ufb02aws in our implementation. For exam-\nple, we suspected bugs in TraceMonkey\u2019s handling of type-unstable\n',
  },
  {
    x: 422.6849333333333,
    y: 9940.2354368,
    width: 318.8093184000002,
    height: 105.02355306666664,
    text: 'Figure 11. Fraction of dynamic bytecodes executed by inter-\npreter and on native traces. The speedup vs. interpreter is shown\nin parentheses next to each test. The fraction of bytecodes exe-\ncuted while recording is too small to see in this \ufb01gure, except\nfor crypto-md5, where fully 3% of bytecodes are executed while\nrecording. In most of the tests, almost all the bytecodes are exe-\ncuted by compiled traces. Three of the benchmarks are not traced\nat all and run in the interpreter.\n',
  },
  {
    x: 422.6849333333333,
    y: 10072.630589866665,
    width: 318.80931840000005,
    height: 25.238800000000005,
    text: 'loops and heavily branching code, and a specialized fuzz tester in-\ndeed revealed several regressions which we subsequently corrected.\n',
  },
  {
    x: 422.6849333333333,
    y: 10115.932280133333,
    width: 318.8093184000002,
    height: 139.0053764,
    text: '7. Evaluation\nWe evaluated our JavaScript tracing implementation using Sun-\nSpider, the industry standard JavaScript benchmark suite. SunSpi-\nder consists of 26 short-running (less than 250ms, average 26ms)\nJavaScript programs. This is in stark contrast to benchmark suites\nsuch as SpecJVM98 (3) used to evaluate desktop and server Java\nVMs. Many programs in those benchmarks use large data sets and\nexecute for minutes. The SunSpider programs carry out a variety of\ntasks, primarily 3d rendering, bit-bashing, cryptographic encoding,\nmath kernels, and string processing.\n',
  },
  {
    x: 438.62519999999995,
    y: 10256.266056533332,
    width: 302.86108160000003,
    height: 11.95519999999999,
    text: 'All experiments were performed on a MacBook Pro with 2.2\n',
  },
  {
    x: 422.6849333333333,
    y: 10269.5495232,
    width: 292.1970432000001,
    height: 11.95519999999999,
    text: 'GHz Core 2 processor and 2 GB RAM running MacOS 10.5.\n',
  },
  {
    x: 422.6849333333333,
    y: 10282.749303466666,
    width: 318.81039680000004,
    height: 118.30715306666676,
    text: 'Benchmark results. The main question is whether programs\nrun faster with tracing. For this, we ran the standard SunSpider test\ndriver, which starts a JavaScript interpreter, loads and runs each\nprogram once for warmup, then loads and runs each program 10\ntimes and reports the average time taken by each. We ran 4 differ-\nent con\ufb01gurations for comparison: (a) SpiderMonkey, the baseline\ninterpreter, (b) TraceMonkey, (d) SquirrelFish Extreme (SFX), the\ncall-threaded JavaScript interpreter used in Apple\u2019s WebKit, and\n(e) V8, the method-compiling JavaScript VM from Google.\n',
  },
  {
    x: 422.6849333333333,
    y: 10402.384723199999,
    width: 318.8093184000002,
    height: 51.87746453333335,
    text: 'Figure 10 shows the relative speedups achieved by tracing, SFX,\nand V8 against the baseline (SpiderMonkey). Tracing achieves the\nbest speedups in integer-heavy benchmarks, up to the 25x speedup\non bitops-bitwise-and.\n',
  },
  {
    x: 422.6849333333331,
    y: 10455.518856533334,
    width: 318.8058666666669,
    height: 51.87746453333331,
    text: 'TraceMonkey is the fastest VM on 9 of the 26 benchmarks\n(3d-morph, bitops-3bit-bits-in-byte, bitops-bitwise-\nand, crypto-sha1, math-cordic, math-partial-sums, math-\nspectral-norm, string-base64, string-validate-input).\n',
  },
  {
    x: 72.0,
    y: 11071.452903466667,
    width: 669.4920447999999,
    height: 91.81181759999996,
    text: 'Figure 10. Speedup vs. a baseline JavaScript interpreter (SpiderMonkey) for our trace-based JIT compiler, Apple\u2019s SquirrelFish Extreme\ninline threading interpreter and Google\u2019s V8 JS compiler. Our system generates particularly ef\ufb01cient code for programs that bene\ufb01t most from\ntype specialization, which includes SunSpider Benchmark programs that perform bit manipulation. We type-specialize the code in question\nto use integer arithmetic, which substantially improves performance. For one of the benchmark programs we execute 25 times faster than\nthe SpiderMonkey interpreter, and almost 5 times faster than V8 and SFX. For a large number of benchmarks all three VMs produce similar\nresults. We perform worst on benchmark programs that we do not trace and instead fall back onto the interpreter. This includes the recursive\nbenchmarks access-binary-trees and control-flow-recursive, for which we currently don\u2019t generate any native code.\n',
  },
  {
    x: 71.99999999999996,
    y: 11191.0883232,
    width: 318.80931840000017,
    height: 65.08933333333334,
    text: 'In particular, the bitops benchmarks are short programs that per-\nform many bitwise operations, so TraceMonkey can cover the en-\ntire program with 1 or 2 traces that operate on integers. TraceMon-\nkey runs all the other programs in this set almost entirely as native\ncode.\n',
  },
  {
    x: 71.99999999999997,
    y: 11257.5059232,
    width: 318.80931840000017,
    height: 51.805733333333364,
    text: 'regexp-dna is dominated by regular expression matching,\nwhich is implemented in all 3 VMs by a special regular expression\ncompiler. Thus, performance on this benchmark has little relation\nto the trace compilation approach discussed in this paper.\n',
  },
  {
    x: 87.94026666666663,
    y: 11310.640056533333,
    width: 302.86108160000015,
    height: 11.955199999999952,
    text: 'TraceMonkey\u2019s smaller speedups on the other benchmarks can\n',
  },
  {
    x: 71.99999999999997,
    y: 11323.9235232,
    width: 178.08465919999992,
    height: 11.95519999999999,
    text: 'be attributed to a few speci\ufb01c causes:\n',
  },
  {
    x: 78.9737333333333,
    y: 11358.383332533333,
    width: 311.83104,
    height: 65.55098853333337,
    text: '\u2022 The implementation does not currently trace recursion, so\nTraceMonkey achieves a small speedup or no speedup on\nbenchmarks that use recursion extensively: 3d-cube, 3d-\nraytrace, access-binary-trees, string-tagcloud, and\ncontrolflow-recursive.\n',
  },
  {
    x: 78.97373333333333,
    y: 11430.1143992,
    width: 311.8360234666667,
    height: 52.19565733333335,
    text: '\u2022 The implementation does not currently trace eval and some\nother functions implemented in C. Because date-format-\ntofte and date-format-xparb use such functions in their\nmain loops, we do not trace them.\n',
  },
  {
    x: 78.97373333333334,
    y: 11488.561865866666,
    width: 311.8309184,
    height: 78.83445519999998,
    text: '\u2022 The implementation does not currently trace through regular\nexpression replace operations. The replace function can be\npassed a function object used to compute the replacement text.\nOur implementation currently does not trace functions called\nas replace functions. The run time of string-unpack-code is\ndominated by such a replace call.\n',
  },
  {
    x: 429.6586666666667,
    y: 11190.698399199999,
    width: 311.8288544,
    height: 12.345124000000016,
    text: '\u2022 Two programs trace well, but have a long compilation time.\n',
  },
  {
    x: 439.95346666666666,
    y: 11204.371789866665,
    width: 310.4018666666667,
    height: 51.805733333333364,
    text: 'access-nbody forms a large number of traces (81). crypto-md5\nforms one very long trace. We expect to improve performance\non this programs by improving the compilation speed of nano-\njit.\n',
  },
  {
    x: 429.6586666666667,
    y: 11262.429332533331,
    width: 311.8347402666665,
    height: 131.8968573333334,
    text: '\u2022 Some programs trace very well, and speed up compared to\nthe interpreter, but are not as fast as SFX and/or V8, namely\nbitops-bits-in-byte, bitops-nsieve-bits, access-\nfannkuch, access-nsieve, and crypto-aes. The reason is\nnot clear, but all of these programs have nested loops with\nsmall bodies, so we suspect that the implementation has a rela-\ntively high cost for calling nested traces. string-fasta traces\nwell, but its run time is dominated by string processing builtins,\nwhich are unaffected by tracing and seem to be less ef\ufb01cient in\nSpiderMonkey than in the two other VMs.\n',
  },
  {
    x: 422.6849333333331,
    y: 11409.166903466667,
    width: 318.80931840000005,
    height: 51.889419733333355,
    text: 'Detailed performance metrics. In Figure 11 we show the frac-\ntion of instructions interpreted and the fraction of instructions exe-\ncuted as native code. This \ufb01gure shows that for many programs, we\nare able to execute almost all the code natively.\n',
  },
  {
    x: 422.6849333333331,
    y: 11462.384723199999,
    width: 318.8093184000002,
    height: 51.80573333333334,
    text: 'Figure 12 breaks down the total execution time into four activ-\nities: interpreting bytecodes while not recording, recording traces\n(including time taken to interpret the recorded trace), compiling\ntraces to native code, and executing native code traces.\n',
  },
  {
    x: 422.6849333333331,
    y: 11515.518723199999,
    width: 318.8093184000002,
    height: 51.80573333333331,
    text: 'These detailed metrics allow us to estimate parameters for a\nsimple model of tracing performance. These estimates should be\nconsidered very rough, as the values observed on the individual\nbenchmarks have large standard deviations (on the order of the\n',
  },
  {
    x: 95.2256,
    y: 11769.740456533335,
    width: 110.92034560000003,
    height: 344.0431999999995,
    text: '3d-cube\n3d-morph\n3d-raytrace\naccess-binary-trees\naccess-fannkuch\naccess-nbody\naccess-nsieve\nbitops-3bit-bits-in-byte\nbitops-bits-in-byte\nbitops-bitwise-and\nbitops-nsieve-bits\ncontrol\ufb02ow-recursive\ncrypto-aes\ncrypto-md5\ncrypto-sha1\ndate-format-tofte\ndate-format-xparb\nmath-cordic\nmath-partial-sums\nmath-spectral-norm\nregexp-dna\nstring-base64\nstring-fasta\nstring-tagcloud\nstring-unpack-code\nstring-validate-input\n',
  },
  {
    x: 222.0844,
    y: 11755.9255232,
    width: 29.887999999999995,
    height: 357.85813333333294,
    text: 'Loops\n25\n5\n10\n0\n10\n8\n3\n2\n3\n1\n3\n0\n50\n4\n5\n3\n3\n2\n2\n15\n2\n3\n5\n3\n4\n6\n',
  },
  {
    x: 267.90868159999997,
    y: 11755.9255232,
    width: 26.13406720000004,
    height: 357.85813333333294,
    text: 'Trees\n27\n8\n25\n0\n34\n16\n6\n2\n3\n1\n3\n0\n72\n4\n5\n3\n3\n4\n4\n20\n2\n5\n11\n6\n4\n10\n',
  },
  {
    x: 309.9909856,
    y: 11755.9255232,
    width: 79.92051199999999,
    height: 357.85813333333294,
    text: 'Traces Aborts\n3\n2\n10\n5\n24\n5\n3\n0\n1\n0\n0\n1\n19\n0\n0\n7\n3\n1\n1\n0\n0\n0\n6\n5\n0\n1\n',
  },
  {
    x: 323.49818880000004,
    y: 11769.740456533335,
    width: 17.932800000000043,
    height: 344.0431999999995,
    text: '29\n8\n100\n0\n57\n18\n8\n2\n4\n1\n5\n0\n78\n5\n10\n4\n11\n5\n4\n20\n2\n7\n15\n6\n37\n13\n',
  },
  {
    x: 405.8477792,
    y: 11755.9255232,
    width: 36.53509119999997,
    height: 357.85813333333294,
    text: 'Flushes\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n',
  },
  {
    x: 458.33110720000013,
    y: 11755.9255232,
    width: 54.69286719999998,
    height: 357.85813333333294,
    text: 'Trees/Loop\n1.1\n1.6\n2.5\n-\n3.4\n2.0\n2.0\n1.0\n1.0\n1.0\n1.0\n-\n1.4\n1.0\n1.0\n1.0\n1.0\n2.0\n2.0\n1.3\n1.0\n1.7\n2.2\n2.0\n1.0\n1.7\n',
  },
  {
    x: 528.9624288000001,
    y: 11755.9255232,
    width: 56.24921599999993,
    height: 357.85813333333294,
    text: 'Traces/Tree\n1.1\n1.0\n4.0\n-\n1.7\n1.1\n1.3\n1.0\n1.3\n1.0\n1.7\n-\n1.1\n1.3\n2.0\n1.3\n3.7\n1.3\n1.0\n1.0\n1.0\n1.4\n1.4\n1.0\n9.3\n1.3\n',
  },
  {
    x: 601.1479264000001,
    y: 11755.9255232,
    width: 60.00314879999996,
    height: 357.85813333333294,
    text: 'Traces/Loop\n1.2\n1.6\n10.0\n-\n5.7\n2.3\n2.7\n1.0\n1.3\n1.0\n1.7\n-\n1.6\n1.3\n2.0\n1.3\n3.7\n2.5\n2.0\n1.3\n1.0\n2.3\n3.0\n2.0\n9.3\n2.2\n',
  },
  {
    x: 677.0873568,
    y: 11755.9255232,
    width: 41.18349120000023,
    height: 357.85813333333294,
    text: 'Speedup\n2.20x\n2.86x\n1.18x\n0.93x\n2.20x\n4.19x\n3.05x\n25.47x\n8.67x\n25.20x\n2.75x\n0.98x\n1.64x\n2.30x\n5.95x\n1.07x\n0.98x\n4.92x\n5.90x\n7.12x\n4.21x\n2.53x\n1.49x\n1.09x\n1.20x\n1.86x\n',
  },
  {
    x: 215.27293333333333,
    y: 12134.330503466666,
    width: 379.959745066667,
    height: 12.038886399999985,
    text: 'Figure 13. Detailed trace recording statistics for the SunSpider benchmark set.\n',
  },
  {
    x: 72.0,
    y: 12174.1963232,
    width: 318.8093184000002,
    height: 118.22333333333336,
    text: 'mean). We exclude regexp-dna from the following calculations,\nbecause most of its time is spent in the regular expression matcher,\nwhich has much different performance characteristics from the\nother programs. (Note that this only makes a difference of about\n10% in the results.) Dividing the total execution time in processor\nclock cycles by the number of bytecodes executed in the base\ninterpreter shows that on average, a bytecode executes in about\n35 cycles. Native traces take about 9 cycles per bytecode, a 3.9x\nspeedup over the interpreter.\n',
  },
  {
    x: 72.00000000000003,
    y: 12293.747923199999,
    width: 318.80931840000017,
    height: 78.37280000000001,
    text: 'Using similar computations, we \ufb01nd that trace recording takes\nabout 3800 cycles per bytecode, and compilation 3150 cycles per\nbytecode. Hence, during recording and compiling the VM runs at\n1/200 the speed of the interpreter. Because it costs 6950 cycles to\ncompile a bytecode, and we save 26 cycles each time that code is\nrun natively, we break even after running a trace 270 times.\n',
  },
  {
    x: 72.00000000000003,
    y: 12373.4491232,
    width: 318.80931840000005,
    height: 65.08920000000003,
    text: 'The other VMs we compared with achieve an overall speedup\nof 3.0x relative to our baseline interpreter. Our estimated native\ncode speedup of 3.9x is signi\ufb01cantly better. This suggests that\nour compilation techniques can generate more ef\ufb01cient native code\nthan any other current JavaScript VM.\n',
  },
  {
    x: 72.00000000000003,
    y: 12439.8667232,
    width: 318.80931840000017,
    height: 131.50680000000008,
    text: 'These estimates also indicate that our startup performance could\nbe substantially better if we improved the speed of trace recording\nand compilation. The estimated 200x slowdown for recording and\ncompilation is very rough, and may be in\ufb02uenced by startup factors\nin the interpreter (e.g., caches that have not warmed up yet during\nrecording). One observation supporting this conjecture is that in\nthe tracer, interpreted bytecodes take about 180 cycles to run. Still,\nrecording and compilation are clearly both expensive, and a better\nimplementation, possibly including redesign of the LIR abstract\nsyntax or encoding, would improve startup performance.\n',
  },
  {
    x: 72.00000000000003,
    y: 12572.701923199998,
    width: 318.80931840000017,
    height: 38.52213333333331,
    text: 'Our performance results con\ufb01rm that type specialization using\ntrace trees substantially improves performance. We are able to\noutperform the fastest available JavaScript compiler (V8) and the\n',
  },
  {
    x: 422.6849333333333,
    y: 12174.196189866665,
    width: 318.8093184000002,
    height: 25.238800000000005,
    text: 'fastest available JavaScript inline threaded interpreter (SFX) on 9\nof 26 benchmarks.\n',
  },
  {
    x: 422.6849333333333,
    y: 12235.932280133333,
    width: 318.8093184000002,
    height: 85.87137639999999,
    text: '8. Related Work\nTrace optimization for dynamic languages. The closest area of\nrelated work is on applying trace optimization to type-specialize\ndynamic languages. Existing work shares the idea of generating\ntype-specialized code speculatively with guards along interpreter\ntraces.\n',
  },
  {
    x: 422.6849333333333,
    y: 12323.131923199999,
    width: 318.8093184000002,
    height: 65.08933333333334,
    text: 'To our knowledge, Rigo\u2019s Psyco (16) is the only published\ntype-specializing trace compiler for a dynamic language (Python).\nPsyco does not attempt to identify hot loops or inline function calls.\nInstead, Psyco transforms loops to mutual recursion before running\nand traces all operations.\n',
  },
  {
    x: 422.6849333333333,
    y: 12389.5495232,
    width: 318.8093184000002,
    height: 78.37280000000005,
    text: 'Pall\u2019s LuaJIT is a Lua VM in development that uses trace com-\npilation ideas. (1). There are no publications on LuaJIT but the cre-\nator has told us that LuaJIT has a similar design to our system, but\nwill use a less aggressive type speculation (e.g., using a \ufb02oating-\npoint representation for all number values) and does not generate\nnested traces for nested loops.\n',
  },
  {
    x: 422.6849333333333,
    y: 12469.166903466667,
    width: 318.8093184000002,
    height: 51.88955306666669,
    text: 'General trace optimization. General trace optimization has\na longer history that has treated mostly native code and typed\nlanguages like Java. Thus, these systems have focused less on type\nspecialization and more on other optimizations.\n',
  },
  {
    x: 422.6849333333333,
    y: 12522.384723199999,
    width: 318.8093184000004,
    height: 65.08933333333334,
    text: 'Dynamo (7) by Bala et al, introduced native code tracing as a\nreplacement for pro\ufb01le-guided optimization (PGO). A major goal\nwas to perform PGO online so that the pro\ufb01le was speci\ufb01c to\nthe current execution. Dynamo used loop headers as candidate hot\ntraces, but did not try to create loop traces speci\ufb01cally.\n',
  },
  {
    x: 422.6849333333333,
    y: 12588.8023232,
    width: 318.8093184000002,
    height: 38.52226666666667,
    text: 'Trace trees were originally proposed by Gal et al. (11) in the\ncontext of Java, a statically typed language. Their trace trees ac-\ntually inlined parts of outer loops within the inner loops (because\n',
  },
  {
    x: 422.6849333333333,
    y: 12817.2539232,
    width: 318.80931840000005,
    height: 25.23879999999993,
    text: 'erate native code with nearly the same structure but better perfor-\nmance.\n',
  },
  {
    x: 422.6849333333333,
    y: 12843.820989866665,
    width: 318.80931840000005,
    height: 65.08933333333319,
    text: 'Call threading, also known as context threading (8), compiles\nmethods by generating a native call instruction to an interpreter\nmethod for each interpreter bytecode. A call-return pair has been\nshown to be a potentially much more ef\ufb01cient dispatch mechanism\nthan the indirect jumps used in standard bytecode interpreters.\n',
  },
  {
    x: 422.6849333333333,
    y: 12910.238589866665,
    width: 318.80931840000005,
    height: 51.80586666666659,
    text: 'Inline threading (15) copies chunks of interpreter native code\nwhich implement the required bytecodes into a native code cache,\nthus acting as a simple per-method JIT compiler that eliminates the\ndispatch overhead.\n',
  },
  {
    x: 438.62519999999995,
    y: 12963.372723199998,
    width: 302.86108160000003,
    height: 11.955199999999877,
    text: 'Neither call threading nor inline threading perform type special-\n',
  },
  {
    x: 422.6849333333333,
    y: 12976.656189866666,
    width: 35.530854400000024,
    height: 11.955199999999877,
    text: 'ization.\n',
  },
  {
    x: 422.6849333333333,
    y: 12989.939789866667,
    width: 318.8093184000002,
    height: 65.08919999999974,
    text: 'Apple\u2019s SquirrelFish Extreme (5) is a JavaScript implementa-\ntion based on call threading with selective inline threading. Com-\nbined with ef\ufb01cient interpreter engineering, these threading tech-\nniques have given SFX excellent performance on the standard Sun-\nSpider benchmarks.\n',
  },
  {
    x: 422.6849333333333,
    y: 13056.357389866665,
    width: 318.8093184000002,
    height: 38.52226666666661,
    text: 'Google\u2019s V8 is a JavaScript implementation primarily based\non inline threading, with call threading only for very complex\noperations.\n',
  },
  {
    x: 422.6849333333333,
    y: 13109.077480133334,
    width: 318.8093184000002,
    height: 165.57244306666666,
    text: '9. Conclusions\nThis paper described how to run dynamic languages ef\ufb01ciently by\nrecording hot traces and generating type-specialized native code.\nOur technique focuses on aggressively inlined loops, and for each\nloop, it generates a tree of native code traces representing the\npaths and value types through the loop observed at run time. We\nexplained how to identify loop nesting relationships and generate\nnested traces in order to avoid excessive code duplication due\nto the many paths through a loop nest. We described our type\nspecialization algorithm. We also described our trace compiler,\nwhich translates a trace from an intermediate representation to\noptimized native code in two linear passes.\n',
  },
  {
    x: 422.6849333333333,
    y: 13275.978189866666,
    width: 318.80931840000005,
    height: 65.08933333333334,
    text: 'Our experimental results show that in practice loops typically\nare entered with only a few different combinations of value types\nof variables. Thus, a small number of traces per loop is suf\ufb01cient\nto run a program ef\ufb01ciently. Our experiments also show that on\nprograms amenable to tracing, we achieve speedups of 2x to 20x.\n',
  },
  {
    x: 422.6849333333333,
    y: 13355.265346799999,
    width: 318.8093184000002,
    height: 125.7219097333334,
    text: '10. Future Work\nWork is underway in a number of areas to further improve the\nperformance of our trace-based JavaScript compiler. We currently\ndo not trace across recursive function calls, but plan to add the\nsupport for this capability in the near term. We are also exploring\nadoption of the existing work on tree recompilation in the context\nof the presented dynamic compiler in order to minimize JIT pause\ntimes and obtain the best of both worlds, fast tree stitching as well\nas the improved code quality due to tree recompilation.\n',
  },
  {
    x: 422.6849333333333,
    y: 13482.315523199999,
    width: 318.80931840000005,
    height: 65.08933333333341,
    text: 'We also plan on adding support for tracing across regular ex-\npression substitutions using lambda functions, function applica-\ntions and expression evaluation using eval. All these language\nconstructs are currently executed via interpretation, which limits\nour performance for applications that use those features.\n',
  },
  {
    x: 422.6849333333333,
    y: 13561.602680133332,
    width: 318.8093184000002,
    height: 72.5877764,
    text: 'Acknowledgments\nParts of this effort have been sponsored by the National Science\nFoundation under grants CNS-0615443 and CNS-0627747, as well\nas by the California MICRO Program and industrial sponsor Sun\nMicrosystems under Project No. 07-127.\n',
  },
  {
    x: 422.6849333333333,
    y: 13635.518856533332,
    width: 318.8093184000002,
    height: 51.80573333333331,
    text: 'The U.S. Government is authorized to reproduce and distribute\nreprints for Governmental purposes notwithstanding any copyright\nannotation thereon. Any opinions, \ufb01ndings, and conclusions or rec-\nommendations expressed here are those of the author and should\n',
  },
  {
    x: 72.0,
    y: 13120.798370133332,
    width: 318.80931840000017,
    height: 78.45661973333327,
    text: 'Figure 12. Fraction of time spent on major VM activities. The\nspeedup vs. interpreter is shown in parentheses next to each test.\nMost programs where the VM spends the majority of its time run-\nning native code have a good speedup. Recording and compilation\ncosts can be substantial; speeding up those parts of the implemen-\ntation would improve SunSpider performance.\n',
  },
  {
    x: 72.00000000000003,
    y: 13250.296723200001,
    width: 318.8093184000001,
    height: 25.238800000000005,
    text: 'inner loops become hot \ufb01rst), leading to much greater tail duplica-\ntion.\n',
  },
  {
    x: 72.00000000000004,
    y: 13276.863789866666,
    width: 318.8093184000003,
    height: 65.08933333333334,
    text: 'YETI, from Zaleski et al. (19) applied Dynamo-style tracing\nto Java in order to achieve inlining, indirect jump elimination,\nand other optimizations. Their primary focus was on designing an\ninterpreter that could easily be gradually re-engineered as a tracing\nVM.\n',
  },
  {
    x: 72.00000000000004,
    y: 13343.281389866666,
    width: 321.8021034666667,
    height: 78.37280000000001,
    text: 'Suganuma et al. (18) described region-based compilation (RBC),\na relative of tracing. A region is an subprogram worth optimizing\nthat can include subsets of any number of methods. Thus, the com-\npiler has more \ufb02exibility and can potentially generate better code,\nbut the pro\ufb01ling and compilation systems are correspondingly more\ncomplex.\n',
  },
  {
    x: 72.00000000000003,
    y: 13422.898770133334,
    width: 318.80931840000017,
    height: 51.88955306666669,
    text: 'Type specialization for dynamic languages. Dynamic lan-\nguage implementors have long recognized the importance of type\nspecialization for performance. Most previous work has focused on\nmethods instead of traces.\n',
  },
  {
    x: 72.00000000000004,
    y: 13476.116589866666,
    width: 318.8093184000003,
    height: 91.65626666666677,
    text: 'Chambers et. al (9) pioneered the idea of compiling multiple\nversions of a procedure specialized for the input types in the lan-\nguage Self. In one implementation, they generated a specialized\nmethod online each time a method was called with new input types.\nIn another, they used an of\ufb02ine whole-program static analysis to\ninfer input types and constant receiver types at call sites. Interest-\ningly, the two techniques produced nearly the same performance.\n',
  },
  {
    x: 72.00000000000004,
    y: 13569.101256533333,
    width: 318.8093184000001,
    height: 38.5222666666667,
    text: 'Salib (17) designed a type inference algorithm for Python based\non the Cartesian Product Algorithm and used the results to special-\nize on types and translate the program to C++.\n',
  },
  {
    x: 72.00000000000004,
    y: 13608.951789866667,
    width: 318.8093184000001,
    height: 38.522266666666646,
    text: 'McCloskey (14) has work in progress based on a language-\nindependent type inference that is used to generate ef\ufb01cient C\nimplementations of JavaScript and Python programs.\n',
  },
  {
    x: 72.00000000000003,
    y: 13648.718636799998,
    width: 318.8093184000001,
    height: 38.60595306666666,
    text: 'Native code generation by interpreters. The traditional inter-\npreter design is a virtual machine that directly executes ASTs or\nmachine-code-like bytecodes. Researchers have shown how to gen-\n',
  },
  {
    x: 72.0,
    y: 13877.2539232,
    width: 318.80931840000017,
    height: 51.80573333333314,
    text: 'not be interpreted as necessarily representing the of\ufb01cial views,\npolicies or endorsements, either expressed or implied, of the Na-\ntional Science foundation (NSF), any other agency of the U.S. Gov-\nernment, or any of the companies mentioned above.\n',
  },
  {
    x: 72.0,
    y: 13942.814813466666,
    width: 67.88673253333333,
    height: 31.121908666666815,
    text: 'References\n[1] LuaJIT\n',
  },
  {
    x: 94.35346666666666,
    y: 13963.309922133332,
    width: 82.66587720000001,
    height: 22.58200000000003,
    text: 'roadmap\n02/msg00051.html.\n',
  },
  {
    x: 188.78859866666667,
    y: 13963.309922133332,
    width: 21.253600000000006,
    height: 10.626800000000003,
    text: '2008\n',
  },
  {
    x: 223.32569866666668,
    y: 13963.309922133332,
    width: 3.538724400000016,
    height: 10.626800000000003,
    text: '-\n',
  },
  {
    x: 240.1479230666667,
    y: 13963.309922133332,
    width: 150.65614360000032,
    height: 10.626800000000003,
    text: 'http://lua-users.org/lists/lua-l/2008-\n',
  },
  {
    x: 77.31346666666667,
    y: 13990.873255466666,
    width: 313.4906000000003,
    height: 10.626800000000003,
    text: '[2] Mozilla \u2014 Firefox web browser and Thunderbird email client -\n',
  },
  {
    x: 94.35346666666666,
    y: 14002.828455466664,
    width: 105.87480839999998,
    height: 10.626800000000003,
    text: 'http://www.mozilla.com.\n',
  },
  {
    x: 77.31346666666667,
    y: 14018.4365888,
    width: 204.78906280000007,
    height: 26.234933333333323,
    text: '[3] SPECJVM98 - http://www.spec.org/jvm98/.\n[4] SpiderMonkey\n',
  },
  {
    x: 203.40044866666668,
    y: 14034.044722133332,
    width: 61.497291600000075,
    height: 10.626800000000003,
    text: '(JavaScript-C)\n',
  },
  {
    x: 94.35346666666666,
    y: 14045.999922133331,
    width: 177.44630639999997,
    height: 10.626800000000003,
    text: 'http://www.mozilla.org/js/spidermonkey/.\n',
  },
  {
    x: 311.00742546666675,
    y: 14034.044722133332,
    width: 30.10572440000006,
    height: 10.626800000000003,
    text: 'Engine\n',
  },
  {
    x: 387.2653422666668,
    y: 14034.044722133332,
    width: 3.538724400000016,
    height: 10.626800000000003,
    text: '-\n',
  },
  {
    x: 77.31346666666667,
    y: 14061.608055466666,
    width: 313.4906000000002,
    height: 10.626800000000003,
    text: '[5] Sur\ufb01n\u2019 Safari - Blog Archive - Announcing SquirrelFish Extreme -\n',
  },
  {
    x: 94.35346666666666,
    y: 14073.563255466666,
    width: 258.2312400000001,
    height: 10.626800000000003,
    text: 'http://webkit.org/blog/214/introducing-squirrel\ufb01sh-extreme/.\n',
  },
  {
    x: 77.31346666666667,
    y: 14089.171388799998,
    width: 313.4906000000003,
    height: 10.626800000000003,
    text: '[6] A. Aho, R. Sethi, J. Ullman, and M. Lam. Compilers: Principles,\n',
  },
  {
    x: 94.35346666666666,
    y: 14101.1265888,
    width: 118.6588488,
    height: 10.626800000000003,
    text: 'techniques, and tools, 2006.\n',
  },
  {
    x: 77.31346666666667,
    y: 14116.734722133333,
    width: 313.4911,
    height: 46.49226666666671,
    text: '[7] V. Bala, E. Duesterwald, and S. Banerjia. Dynamo: A transparent\ndynamic optimization system. In Proceedings of the ACM SIGPLAN\nConference on Programming Language Design and Implementation,\npages 1\u201312. ACM Press, 2000.\n',
  },
  {
    x: 77.31346666666668,
    y: 14168.208322133332,
    width: 313.4958396000003,
    height: 46.49240000000009,
    text: '[8] M. Berndl, B. Vitale, M. Zaleski, and A. Brown. Context Threading:\na Flexible and Ef\ufb01cient Dispatch Technique for Virtual Machine In-\nterpreters. In Code Generation and Optimization, 2005. CGO 2005.\nInternational Symposium on, pages 15\u201326, 2005.\n',
  },
  {
    x: 77.31346666666668,
    y: 14219.682055466666,
    width: 313.4958396000001,
    height: 58.44746666666674,
    text: '[9] C. Chambers and D. Ungar. Customization: Optimizing Compiler\nTechnology for SELF, a Dynamically-Typed O bject-Oriented Pro-\nIn Proceedings of the ACM SIGPLAN 1989\ngramming Language.\nConference on Programming Language Design and Implementation,\npages 146\u2013160. ACM New York, NY, USA, 1989.\n',
  },
  {
    x: 422.68493333333333,
    y: 13878.051239066666,
    width: 318.80685906666673,
    height: 34.78148306666677,
    text: '[10] A. Gal. Ef\ufb01cient Bytecode Veri\ufb01cation and Compilation in a Virtual\nMachine Dissertation. PhD thesis, University Of California, Irvine,\n2006.\n',
  },
  {
    x: 422.68493333333333,
    y: 13918.1461888,
    width: 318.8086945333333,
    height: 46.49226666666679,
    text: '[11] A. Gal, C. W. Probst, and M. Franz. HotpathVM: An effective JIT\nIn Proceedings of the\ncompiler for resource-constrained devices.\nInternational Conference on Virtual Execution Environments, pages\n144\u2013153. ACM Press, 2006.\n',
  },
  {
    x: 422.68493333333333,
    y: 13969.951922133334,
    width: 318.80400000000014,
    height: 10.626800000000003,
    text: '[12] C. Garrett, J. Dean, D. Grove, and C. Chambers. Measurement and\n',
  },
  {
    x: 445.0384,
    y: 13981.907122133332,
    width: 257.3279620000001,
    height: 10.626800000000003,
    text: 'Application of Dynamic Receiver Class Distributions. 1994.\n',
  },
  {
    x: 422.68493333333333,
    y: 13997.847255466666,
    width: 318.8093062666669,
    height: 34.537200000000055,
    text: '[13] J. Ha, M. R. Haghighat, S. Cong, and K. S. McKinley. A concurrent\ntrace-based just-in-time compiler for javascript. Dept.of Computer\nSciences, The University of Texas at Austin, TR-09-06, 2009.\n',
  },
  {
    x: 422.68493333333333,
    y: 14037.697922133333,
    width: 318.80518013333335,
    height: 62.43253333333344,
    text: '[14] B. McCloskey. Personal communication.\n[15] I. Piumarta and F. Riccardi. Optimizing direct threaded code by selec-\ntive inlining. In Proceedings of the ACM SIGPLAN 1998 conference\non Programming language design and implementation, pages 291\u2013\n300. ACM New York, NY, USA, 1998.\n',
  },
  {
    x: 422.6849333333333,
    y: 14105.4437888,
    width: 318.80400000000037,
    height: 10.626800000000003,
    text: '[16] A. Rigo. Representation-Based Just-In-time Specialization and the\n',
  },
  {
    x: 445.03839999999997,
    y: 14117.154572399999,
    width: 192.7375666666666,
    height: 10.871216400000018,
    text: 'Psyco Prototype for Python. In PEPM, 2004.\n',
  },
  {
    x: 422.6849333333333,
    y: 14133.339255466666,
    width: 63.71829279999997,
    height: 10.626800000000003,
    text: '[17] M. Salib.\n',
  },
  {
    x: 498.30524213333325,
    y: 14133.339255466666,
    width: 243.18369120000025,
    height: 10.626800000000003,
    text: 'Starkiller: A Static Type Inferencer and Compiler for\n',
  },
  {
    x: 445.03839999999997,
    y: 14145.049905733333,
    width: 144.50236666666666,
    height: 10.871216400000094,
    text: 'Python. In Master\u2019s Thesis, 2004.\n',
  },
  {
    x: 422.6849333333333,
    y: 14161.2345888,
    width: 318.80910946666654,
    height: 86.34293333333349,
    text: '[18] T. Suganuma, T. Yasue, and T. Nakatani. A Region-Based Compila-\ntion Technique for Dynamic Compilers. ACM Transactions on Pro-\ngramming Languages and Systems (TOPLAS), 28(1):134\u2013174, 2006.\n[19] M. Zaleski, A. D. Brown, and K. Stoodley. YETI: A graduallY\nIn Proceedings of the International\nExtensible Trace Interpreter.\nConference on Virtual Execution Environments, pages 83\u201393. ACM\nPress, 2007.\n',
  },
];
